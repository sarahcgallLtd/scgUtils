[{"path":"https://sarahcgall.github.io/scgUtils/articles/creating-colour-palettes.html","id":"viewing-available-colours-with-colour_display","dir":"Articles","previous_headings":"","what":"Viewing Available Colours with colour_display()","title":"Mastering Colour Selection","text":"colour_display() function visualises colour options specified palette. integrates colour_pal() fetch colour data uses internal helper function, contrast_test(), ensure text readability coloured bars.","code":"# Example: Visualise the 'polUK' palette colour_display(\"polUK\") # Example: Visualise an individual colour colour_display(\"Jaffa\") # Example: Visualise all individual colours colour_display(\"All\") # Example: View a sequential colour palette with a continuous scale colour_display(\"seqGreen\", 7, type = \"continuous\")"},{"path":"https://sarahcgall.github.io/scgUtils/articles/creating-colour-palettes.html","id":"retrieving-colours-with-colour_pal","dir":"Articles","previous_headings":"","what":"Retrieving Colours with colour_pal()","title":"Mastering Colour Selection","text":"colour_pal() function generates colour palettes graphs. supports sequential, diverging, categorical, political palettes, allowing users retrieve individual colours ranges colours based specified palette.","code":"# Example: Return full categorical extended palette colour_pal(\"catExtended\") #>  [1] \"#478c5b\" \"#374e8e\" \"#df7c18\" \"#ac004f\" \"#4fbbae\" \"#ce4631\" \"#006d64\" #>  [8] \"#1b87aa\" \"#e3b13e\" \"#ae49a2\" \"#383751\" \"#704600\" \"#93a345\" \"#7e7e8f\" #> [15] \"#d5cdb9\" \"#a07bde\" \"#8aabfd\" \"#a08962\"  # Example: Return an individual colour colour_pal(\"Jaffa\") #> [1] \"#e78e47\"  # Example: Return a diverging palette with assigned categories colour_pal(\"divBlueGreen\", 5, c(\"Very Likely\", \"Likely\", \"Neutral\", \"Unlikely\", \"Very Unlikely\")) #> $`Very Likely` #> [1] \"#1b87aa\" #>  #> $Likely #> [1] \"#70a9c1\" #>  #> $Neutral #> [1] \"#c7c7c7\" #>  #> $Unlikely #> [1] \"#acb58a\" #>  #> $`Very Unlikely` #> [1] \"#93a345\""},{"path":"https://sarahcgall.github.io/scgUtils/articles/creating-colour-palettes.html","id":"preparing-palettes-with-colour_prep","dir":"Articles","previous_headings":"","what":"Preparing Palettes with colour_prep()","title":"Mastering Colour Selection","text":"colour_prep() prepares colour palette visualising data assigning colours unique values across specified columns data frame. particularly useful creating consistent colour mappings visualisations.","code":"# Example data frame df <- data.frame(   Category1 = c(\"Scottish National Party (SNP)\", \"Labour\", \"Conservative\", \"Other\"),   Category2 = c(\"An independent candidate\", \"Invalid_Party_Name\", \"Other\", \"Conservative\") )  # Prepare a colour palette for the unique values in Category1 and Category2 colour_palette <- colour_prep(df, c(\"Category1\", \"Category2\"))  # Print the prepared colour palette print(colour_palette) #> $`An independent candidate` #> [1] \"#478c5b\" #>  #> $Conservative #> [1] \"#374e8e\" #>  #> $Invalid_Party_Name #> [1] \"#df7c18\" #>  #> $Labour #> [1] \"#ac004f\" #>  #> $Other #> [1] \"#4fbbae\" #>  #> $`Scottish National Party (SNP)` #> [1] \"#ce4631\""},{"path":"https://sarahcgall.github.io/scgUtils/articles/uploading-data.html","id":"uploading-package-data-with-get_data","dir":"Articles","previous_headings":"","what":"Uploading Package Data with get_data()","title":"Uploading & Cleaning Data","text":"get_data() function scgUtils designed simplify process importing datasets R environment. function particularly useful working packaged data want load data seamlessly without worrying file paths data import syntax. Example Usage: Suppose dataset named “survey” within package want access dataset another package. get_data() function makes process straightforward: function loads dataset assigns variable, case, df. allows perform initial inspections manipulations. functionality essential quickly setting data analysis, especially exploratory data analysis educational settings. Additionally, notice dataset initially ‘haven_labelled’ class. convert standard format, use labelled package:","code":"# Loading a sample dataset df <- get_data(\"survey\")  # Inspecting the dataset's class and a categorical column class(df) #> [1] \"tbl_df\"     \"tbl\"        \"data.frame\"  class(df$turnoutUKGeneral) #> [1] \"haven_labelled\" \"vctrs_vctr\"     \"double\"  head(df[, 1:6]) # Converting 'haven_labelled' data to standard format df <- labelled::unlabelled(df)  # View class class(df) #> [1] \"tbl_df\"     \"tbl\"        \"data.frame\"  class(df$turnoutUKGeneral) #> [1] \"factor\"  head(df[, 1:6])"},{"path":"https://sarahcgall.github.io/scgUtils/articles/uploading-data.html","id":"cleaning-data-with-process_factors","dir":"Articles","previous_headings":"","what":"Cleaning Data with process_factors()","title":"Uploading & Cleaning Data","text":"process_factors() function crucial tool data cleaning, particularly dealing factor variables. Often datasets, especially derived surveys categorisations, factor variables contain levels used (e.g., caused factor level used disqualify respondents). unused levels can misleading may affect analyses handled properly. process_factors() function simplifies task automatically identifying removing unused factor levels, streamlining dataset analysis. Example Usage: Consider dataset factor variable ageGroup includes levels like “18”, “18-25”, “26-35”, etc. dataset entries “18”, level redundant. applying process_factors(), can clean unused levels:","code":"# Examining factor levels before cleaning levels(df$ageGroup) #> [1] \"Under 18\" \"18-25\"    \"26-35\"    \"36-45\"    \"46-55\"    \"56-65\"    #> [7] \"66+\" # Cleaning the dataset with process_factors df <- process_factors(df)  # Verifying that \"Under 18\" is removed levels(df$ageGroup) #> [1] \"18-25\" \"26-35\" \"36-45\" \"46-55\" \"56-65\" \"66+\"  # Checking the metadata of the 'ageGroup' column attr(df$ageGroup, \"label\") #> [1] \"Age group\"  # Inspecting the class of cleaned columns class(df) #> [1] \"data.frame\"  class(df$turnoutUKGeneral) #> [1] \"factor\""},{"path":"https://sarahcgall.github.io/scgUtils/articles/uploading-data.html","id":"using-get_file-for-diverse-data-sources","dir":"Articles","previous_headings":"","what":"Using get_file() for Diverse Data Sources","title":"Uploading & Cleaning Data","text":"get_file() function versatile tool importing data R various sources. function particularly useful working data stored different locations formats. retrieves data also performs initial preprocessing based file type, handling special characters CSV files dealing complexities .sav (SPSS) files.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/articles/uploading-data.html","id":"local","dir":"Articles","previous_headings":"Using get_file() for Diverse Data Sources","what":"Local","title":"Uploading & Cleaning Data","text":"files stored locally, get_file() can directly access given correct path. useful datasets stored within project elsewhere system.","code":"df <- get_file(file_path = \"inst/extdata/survey.sav\",                source = \"local\") # default  # View class class(df) #> [1] \"data.frame\"  class(df$turnoutUKGeneral) #> [1] \"factor\"  head(df[, 1:6])"},{"path":"https://sarahcgall.github.io/scgUtils/articles/uploading-data.html","id":"onedrive","dir":"Articles","previous_headings":"Using get_file() for Diverse Data Sources","what":"OneDrive","title":"Uploading & Cleaning Data","text":"get_file() can also interface OneDrive, allowing seamless integration data stored cloud. feature particularly useful collaborative projects accessing data across multiple devices. OneDrive Authentication: Microsoft Office 365 Login Screen  authentication, file downloaded made available R environment.","code":"df <- get_file(file_path = \"scgUtils_examples_folder/survey.sav\",                source = \"onedrive\") #> Loading Microsoft Graph login for default tenant  # View class class(df) #> [1] \"data.frame\"  class(df$turnoutUKGeneral) #> [1] \"factor\"  head(df[, 1:6])"},{"path":"https://sarahcgall.github.io/scgUtils/articles/uploading-data.html","id":"websites","dir":"Articles","previous_headings":"Using get_file() for Diverse Data Sources","what":"Websites","title":"Uploading & Cleaning Data","text":"Retrieving files web sources another key feature. allows directly import datasets hosted online without need download manually.","code":"df <- get_file(file_path = \"https://github.com/sarahcgall/scgUtils/blob/master/inst/extdata/survey.csv\",                source = \"web\")  # View class class(df) #> [1] \"tbl_df\"     \"tbl\"        \"data.frame\"  class(df$turnoutUKGeneral) #> [1] \"character\"  head(df[, 1:6])"},{"path":"https://sarahcgall.github.io/scgUtils/articles/uploading-data.html","id":"troubleshooting--sav-files-with-get_file","dir":"Articles","previous_headings":"","what":"Troubleshooting .sav Files with get_file()","title":"Uploading & Cleaning Data","text":"Working .sav files (SPSS format) can sometimes lead challenges due complex structure encoding. get_file() function scgUtils package, utilises haven package handling .sav files, well-equipped manage challenges. However, users may occasionally encounter issues related encoding formatting.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/articles/uploading-data.html","id":"common-issues-and-solutions","dir":"Articles","previous_headings":"Troubleshooting .sav Files with get_file()","what":"Common Issues and Solutions:","title":"Uploading & Cleaning Data","text":"Encoding Errors: Problem: .sav files may contain characters symbols correctly encoded, leading warnings errors import process. Solution: get_file() function tries manage attempting read file different encodings. default reading fails, attempts ‘latin1’ encoding. approach handles wide range encoding issues commonly encountered .sav files. Handling NA Values: Problem: SPSS files often unique representations missing values, may align R’s standard NA. Solution: get_file() function includes steps handle discrepancies. instance, .sav file represents missing values “NA”, following code snippet can used convert R’s NA:  step ensures R recognises missing values correctly, allowing accurate data analysis manipulation.","code":"# Handling NA values represented as \"__NA__\" in .sav files df[df == \"__NA__\"] <- NA"},{"path":"https://sarahcgall.github.io/scgUtils/articles/uploading-data.html","id":"best-practices-for-troubleshooting","dir":"Articles","previous_headings":"Troubleshooting .sav Files with get_file()","what":"Best Practices for Troubleshooting:","title":"Uploading & Cleaning Data","text":"Check File Formatting: attempting import .sav file, ensure correctly formatted. Pay special attention proprietary encoding unique representations data within file. Read Warnings Carefully: using get_file(), carefully read warnings error messages appear. messages can provide vital clues troubleshooting resolving issues. Consult Documentation: detailed guidance handling specific .sav file issues, refer scgUtils haven package documentation. resources can offer additional insights solutions complex cases.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"step-1-upload-the-sample-dataset","dir":"Articles","previous_headings":"","what":"Step 1: Upload the Sample Dataset","title":"Using scgUtils with Survey Data","text":"process begins loading dataset. scgUtils package offers two main functions purpose: get_data() get_file(). Using get_data(): function ideal loading datasets directly R packages. streamlines process importing naming dataset R environment. Note: sample data subset British Electoral Survey. full data, visit British Election Study. Using get_file(): working external data files, .sav .csv, get_file() becomes invaluable. imports data also preprocesses , handling special characters facilitates conversion specialised data types, haven_labelled, standard R formats, making robust choice various data sources. detailed uploading instructions, refer Uploading & Cleaning Data article.","code":"# Example of loading and preprocessing a dataset df <- get_data(\"survey\") %>%   labelled::unlabelled() %>% # Convert 'haven_labelled' data to standard format   process_factors() # Remove unused factor levels # Using the  `get_file function option which includes the above preprocessing. df <- get_file(\"inst/extdata/survey.sav\")  head(df[, 1:6])"},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"step-2-viewing-the-full-dataset","dir":"Articles","previous_headings":"","what":"Step 2: Viewing the Full Dataset","title":"Using scgUtils with Survey Data","text":"uploading data, ’s important understand structure content. sjPlot package’s view_df() function provides interactive HTML view dataset, allowing immediate comprehensive examination data’s attributes, frequencies, percentages. step crucial identifying nature variables, understanding distribution, planning data processing strategies.","code":"sjPlot::view_df(df[, 1:10],  # NB first 10 variables shown only in this example                 weight.by = \"wt\",                 show.type = TRUE, # show whether variable is numeric or categorical                 show.wtd.frq = TRUE, # display weighted frequency                 show.wtd.prc = TRUE, # display weighted % )"},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"step-3-weighting-the-data","dir":"Articles","previous_headings":"","what":"Step 3: Weighting the Data","title":"Using scgUtils with Survey Data","text":"Survey data analysis sometimes necessitates weighting address issues like sample design response biases. Future developments scgUtils introduce user-friendly functions applying weights, ensuring analysis reflects intended population accurately.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"step-4-processing-the-data","dir":"Articles","previous_headings":"","what":"Step 4: Processing the Data","title":"Using scgUtils with Survey Data","text":"Survey data often requires specific processing steps ensure analysis-ready. may involve creating new variables, recoding factors, handling missing values, . Future developments scgUtils package aim simplify tasks, providing tools streamline data preparation enhance quality subsequent analysis.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"step-5-exploring-the-data","dir":"Articles","previous_headings":"","what":"Step 5: Exploring the Data","title":"Using scgUtils with Survey Data","text":"Exploring survey data effectively demands nuanced approach numeric categorical data. scgUtils package, complemented base R functionalities, offers comprehensive toolkit exploration.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"numeric-data","dir":"Articles","previous_headings":"Step 5: Exploring the Data","what":"Numeric data","title":"Using scgUtils with Survey Data","text":"Numeric data, age, income, survey ratings, can reveal significant trends patterns analysed correctly. Summary Statistics Begin summary() quick overview, offering key statistical measures.  group-wise insights, tapply() combined summary() allows dissect data based categories like gender education level, providing clearer understanding distribution across different segments.  Mean Calculation Average calculations, weighted unweighted, crucial survey analysis. Utilise mean() simple averages weighted.mean() complex scenarios survey design needs accounted .  Grouped Mean grp_mean() advanced analysis, grp_mean() elegantly calculates group-wise means. simplifies process aggregating data across one categorical variables, offering efficient alternative verbose methods like dplyr.","code":"summary(df$age) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   18.00   55.00   66.00   63.58   73.00   93.00 # By group: tapply(df$age, df$gender, summary) #> $Male #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   30.00   56.00   66.00   64.15   74.00   93.00  #>  #> $Female #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   18.00   54.00   66.00   62.97   73.00   93.00 # Unweighted: mean(df$age) #> [1] 63.5824  # Weighted: weighted.mean(df$age, df$wt) #> [1] 60.17577 # By a single group: grp_mean(df,          meanVar = \"age\",          groups = \"gender\",          weight = \"wt\" # optional )  # `dplyr` equivalent: # df %>% #   group_by(gender) %>% #   summarise(Mean = weighted.mean(age, wt)) %>% #   ungroup() # By many groups: grp_mean(df,          meanVar = \"age\",          groups = c(\"gender\", \"partyId\"),          weight = \"wt\", # optional          set_names = c(\"Gender\", \"Party Identification\", \"Average Age\"), # optional: change names          round_decimals = 2 # optional: round decimal places to 2 digits ) %>%   head()  # `dplyr` equivalent: # df %>% #   group_by(gender, partyId) %>% #   summarise(`Average Age` = weighted.mean(age, wt)) %>% #   ungroup() %>% #   rename(Gender = gender, `Party Identification` = partyId) %>% #   head()"},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"categorical-data","dir":"Articles","previous_headings":"Step 5: Exploring the Data","what":"Categorical data","title":"Using scgUtils with Survey Data","text":"Categorical data typically includes demographics multiple-choice responses. Analysing effectively unlocks insights respondent behaviours preferences. Grouped Frequencies grp_freq()grp_freq() shines ability provide detailed frequency percentage breakdowns across various groups. ’s capable handling weighted unweighted data, adding depth precision categorical data analysis.  *Two--Two Tables crosstab() Creating detailed cross-tabulations seamless crosstab(). function structures data insightful two--two tables also allows inclusion additional statistical measures. Customise output format fit analytical needs, whether wide long data formats.  Efficiently Combine Statistics compile() dealing numerous variables, compile() go-function. can create comprehensive data frame relevant statistics like Chi-square, Degrees Freedom, Cramer’s V, p-value, streamlining statistical analysis process.","code":"# By a single group: grp_freq(df,          groups = \"partyId\",          weight = \"wt\", # optional          addPercent = TRUE # optional ) %>%   head()  # `dplyr` equivalent: # df %>% #   group_by(partyId) %>% #   summarise(Freq = sum(wt)) %>% #   ungroup() %>% #   mutate(Perc = Freq / sum(Freq)) %>% #   head() # By many group: grp_freq(df,          groups = c(\"partyId\", \"gender\"),          weight = \"wt\", # optional          groupsPercent = \"partyId\", # optional          round_decimals = 2 # optional: round decimal places to 2 digits ) %>%   head()  # `dplyr` equivalent: # df %>% #   group_by(partyId, gender) %>% #   summarise(Freq = sum(wt)) %>% #   ungroup() %>% #   group_by(partyId) %>% #   mutate(Perc = Freq / sum(Freq)) %>% #   ungroup() %>% #   head() crosstab(df,          rowVar = \"partyId\",          colVar = \"gender\",          weight = \"wt\", # optional          format = \"df_wide\",          round_decimals = 2, # optional          statistics = TRUE # optional ) %>%   head() #> [1] \"partyId x gender: Chisq = 29.054 | DF = 9 | Cramer's V = 0.028 | p-value = 0.001\" crosstab(df,          rowVar = \"partyId\",          colVar = \"gender\",          weight = \"wt\", # optional          format = \"df_long\", # default option          round_decimals = 2, # optional          totals = FALSE, # optional          convert_to = \"frequency\" ) %>%   head() # the row variables are typically your questions within the survey. For ease, utilise dplyr to select the variables rowVars <- names(df %>% dplyr::select(turnoutUKGeneral:partyIdStrength,                                       partyIdSqueeze:likeGrn,                                       pcon:p_hh_size,                                       p_disability:p_past_vote_2019,                                       p_eurefturnout))  # the column variables tend to be the demographic variables colVars <- c(\"gender\", \"ageGroup\", \"p_socgrade\", \"partyId\", \"p_eurefvote\", \"p_edlevel\")  # compile stats and save to data frame called `stats` stats <- compile(df,                  rowVars = rowVars,                  colVars = colVars,                  weight = \"wt\", # optional                  save = FALSE, # turn this to FALSE to prevent saving as a .csv                  format = \"statistics\")  # View first 10, sorted by Cramer's V head(stats[order(-stats$CramersV),], 10)"},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"grid-data","dir":"Articles","previous_headings":"Step 5: Exploring the Data","what":"Grid data","title":"Using scgUtils with Survey Data","text":"Grid questions, common surveys, pose unique analytical challenges due format. Handling Grid Data grid_vars()grid_vars() tailor-made data, turning complex grid questions analysable formats. ’s particularly adept handling “select apply” questions grid-type responses, transforming format conducive comparison visualisation libraries ggplot2.  Implementing grid_vars() Group Enhance functionality grid_vars() applying group variable. allows dissecting responses across different demographic categorical segments, providing richer, targeted insights.","code":"# Create a named list of the columns that relate to the question vars <- list(likeSunak = \"Rishi Sunak\",              likeStarmer = \"Keir Starmer\",              likeCon = \"Conservative Party\",              likeLab = \"Labour Party\",              likeLD = \"Lib Dems\",              likeSNP = \"SNP\",              likePC = \"Plaid Cymru\",              likeBrexitParty = \"Brexit Party\",              likeGrn = \"Green Party\" )  grid_vars(df,           vars = vars,           weight = \"wt\" # optional ) %>%   head() grid_vars(df,           vars = vars,           group = \"gender\", # optional           weight = \"wt\" # optional ) %>%   head()"},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"step-6-visualising-the-data","dir":"Articles","previous_headings":"","what":"Step 6: Visualising the Data","title":"Using scgUtils with Survey Data","text":"Effective visualisation key survey data analysis, offering way intuitively understand communicate complex data patterns. scgUtils package provides specialised functions like plot_popn() demographic analysis plot_sankey() flow visualisation, helping understand data also present compelling insightful manner.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"crosstabs","dir":"Articles","previous_headings":"Step 6: Visualising the Data","what":"Crosstabs","title":"Using scgUtils with Survey Data","text":"Crosstabulation fundamental technique survey analysis, especially examining relationships categorical variables. Visualising Crosstabs crosstab() crosstab function, used plot = TRUE option, turns data insightful visual crosstabs. aids understanding distribution responses also includes statistical measures deeper analysis.   Adjusting Readability plots numerous variables along X-axis, adjustX = TRUE rotates labels better readability, ensuring even dense data remains accessible interpretable.","code":"crosstab(df,          rowVar = \"p_eurefvote\",          colVar = \"p_edlevel\",          weight = \"wt\",          plot = TRUE,          statistics = TRUE,          round_decimals = 2 ) %>%   head() #> [1] \"p_eurefvote x p_edlevel: Chisq = 371.026 | DF = 10 | Cramer's V = 0.243 | p-value = 0\" crosstab(df,          rowVar = \"polAttention\",          colVar = \"gender\",          weight = \"wt\",          plot = TRUE,          statistics = TRUE,          adjustX = TRUE,          round_decimals = 2 ) %>%   head() #> [1] \"polAttention x gender: Chisq = 163.768 | DF = 11 | Cramer's V = 0.061 | p-value = 0\""},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"other-visualisations","dir":"Articles","previous_headings":"Step 6: Visualising the Data","what":"Other Visualisations","title":"Using scgUtils with Survey Data","text":"broader spectrum visualisation techniques detailed guidance effectively using colour plots, refer Visualising Data article Mastering Colour Selection article. resources provide additional insights making scgUtils package visualising complex survey data.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"step-7-presenting-the-results","dir":"Articles","previous_headings":"","what":"Step 7: Presenting the Results","title":"Using scgUtils with Survey Data","text":"Presenting results survey analysis clear impactful way crucial. scgUtils package offers functionalities aid creating detailed informative presentations.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"tables","dir":"Articles","previous_headings":"Step 7: Presenting the Results","what":"Tables","title":"Using scgUtils with Survey Data","text":"Tables fundamental tools presenting complex data structured easily interpretable format. Extending compile() Comprehensive Tables compile() function scgUtils excels generating comprehensive crosstab tables. efficiently processes variable pair within dataset, producing detailed tabular outputs. tables can formatted saved CSV files, making perfect inclusion reports analysis. ability create extensive tables invaluable presenting holistic view survey results, encompassing various aspects relationships within data.  Visual Representation Compiled Tables add visual appeal enhance interpretability, future additions scgUtils package include ability view compiled tables graphically.","code":"rowVars <- names(df %>% dplyr::select(turnoutUKGeneral:partyIdStrength,                                       partyIdSqueeze:likeGrn,                                       pcon:p_hh_size,                                       p_disability:p_past_vote_2019,                                       p_eurefturnout))  colVars <- c(\"gender\", \"ageGroup\", \"p_socgrade\", \"partyId\", \"p_eurefvote\", \"p_edlevel\")  compile(df,         rowVars = rowVars,         colVars = colVars,         weight = \"wt\", # optional         name = \"crosstabs\" # this will save as \"crosstabs.csv\" )"},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"powerpoint-integration","dir":"Articles","previous_headings":"Step 7: Presenting the Results","what":"PowerPoint Integration","title":"Using scgUtils with Survey Data","text":"future updates, scgUtils aims incorporate capabilities directly exporting analysis results PowerPoint presentations. functionality facilitate seamless integration data findings professional engaging presentation formats, suitable various audiences.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"interactive-dashboards","dir":"Articles","previous_headings":"Step 7: Presenting the Results","what":"Interactive Dashboards","title":"Using scgUtils with Survey Data","text":"Another upcoming feature ability create interactive dashboards directly survey data. Dashboards offer dynamic way explore present data, allowing users interact information, drill specifics, gain deeper understanding underlying patterns. functionality significant enhancement, providing powerful tool data storytelling decision-making processes.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/articles/visualising-data.html","id":"sankey","dir":"Articles","previous_headings":"","what":"Sankey","title":"Visualising Data","text":"Flow visualisation helps understanding different categories respondents transition various stages choices. plot_sankey() function instrumental depicting flow data, especially useful understanding voting patterns changes preferences time.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/articles/visualising-data.html","id":"preparing-data-with-grp_freq","dir":"Articles","previous_headings":"Sankey","what":"Preparing Data with grp_freq()","title":"Visualising Data","text":"visualising, prepare data using grp_freq(), aggregates frequencies necessary Sankey diagram.","code":"# Subset the required columns from the dataset sankey_df <- survey_df[, c(\"wt\", \"generalElectionVote\", \"p_past_vote_2019\")]  # Get the frequency sankey_df <- grp_freq(sankey_df,                       groups = c(\"generalElectionVote\", \"p_past_vote_2019\"),                       weight = \"wt\", # optional                       round_decimals = 0, # optional ) head(sankey_df) # NB. The `dplyr` equivalent is: # df %>% #   group_by(generalElectionVote, p_past_vote_2019) %>% #   summarise(Freq = sum(wt))"},{"path":"https://sarahcgall.github.io/scgUtils/articles/visualising-data.html","id":"customising-the-sankey-diagram","dir":"Articles","previous_headings":"Sankey","what":"Customising the Sankey Diagram","title":"Visualising Data","text":"plot_sankey() function offers extensive customisation, allowing diagram tailored specific data narratives. colour_prep() function enhances customisation facilitating assignment meaningful colours based categories like political party affiliations. customisation improves aesthetic appeal Sankey diagram also boosts interpretability effectiveness conveying complex data flows.","code":"plot_sankey(sankey_df,             source = \"p_past_vote_2019\", # on the left side             target = \"generalElectionVote\", # on the right side             value = \"Freq\",             units = \" votes\",             colours = colour_prep(df, c(\"generalElectionVote\", \"p_past_vote_2019\"), pal_name = \"polUK\"),             fontSize = 16, # change font size             fontFamily = \"Calibri\", # default             nodeWidth = 20, # default             nodePadding = 10, # default             margin = list(top = 0, right = 130, bottom = 0, left = 0), # adjust the margin             width = 1200, # default             height = 800, # default             shiftLabel = NULL, # default             heading = \"Flow of Votes\",             sourceTitle = \"2019 Vote\",             targetTitle = \"VI\" ) # %>% # save from viewer to html # htmlwidgets::saveWidget(file = \"sankey_VI.html\", selfcontained = TRUE)"},{"path":"https://sarahcgall.github.io/scgUtils/articles/visualising-data.html","id":"parliament","dir":"Articles","previous_headings":"","what":"Parliament","title":"Visualising Data","text":"Understanding distribution parliamentary seats among political parties crucial grasping political landscape. plot_parliament() function scgUtils designed visualise distribution semicircular parliament layout. particularly useful illustrating composition parliament following election.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/articles/visualising-data.html","id":"basic-parliament","dir":"Articles","previous_headings":"Parliament","what":"Basic Parliament","title":"Visualising Data","text":"basic usage plot_parliament() involves creating plot shows number seats party holds. representation helps quickly understanding strength party within parliament.","code":"# Prepare Data de_parliament <- data.frame(   Party = c(\"SPD\", \"Greens\", \"FDP\", \"The Left\", \"Other\", \"AfD\", \"CDU/CSU\"),   Result = c(206, 118, 92, 39, 1, 83, 97) )  # Plot plot_parliament(de_parliament,                 partyCol = \"Party\",                 seatCol = \"Result\",                 colours = c(\"#e3000f\", \"#409a3c\", \"#ffed00\", \"#be3075\", \"#dcdcdc\", \"#00a2de\", \"black\") # optional )"},{"path":"https://sarahcgall.github.io/scgUtils/articles/visualising-data.html","id":"adding-a-percentage-bar","dir":"Articles","previous_headings":"Parliament","what":"Adding a Percentage Bar","title":"Visualising Data","text":"detailed analysis, plot_parliament() can also include percentage bar shows popular vote won party. feature provides additional context seat distribution, reflecting party popularity translates parliamentary seats. plot offers intuitive way analyse election results, party strengths, representation parliament. inclusion majority line enhances plot delineating threshold needed majority.","code":"# Prepare Data uk_parliament <- data.frame(   Party = c(\"Labour\", \"SNP\", \"Other\", \"Liberal Democrat\", \"Conservative\"),   Seats = c(202, 48, 24, 11, 365),   Percentage = c(32.1, 3.9, 8.8, 11.6, 43.6) )  # Plot plot_parliament(uk_parliament,                 \"Party\",                 \"Seats\",                 \"Percentage\",                 majorityLine = TRUE, # add line down centre                 title = \"2019 UK General Election\", # add title                 subtitle = \"Results\", # add subtitle                 legend = \"bottom\", # add legend to bottom                 colours = colour_prep(uk_parliament, \"Party\", \"polUK\"), # match colours using `colour_prep()` )"},{"path":"https://sarahcgall.github.io/scgUtils/articles/visualising-data.html","id":"population","dir":"Articles","previous_headings":"","what":"Population","title":"Visualising Data","text":"Understanding demographic distribution vital survey analysis. plot_popn() creates visual representations population profiles.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/articles/visualising-data.html","id":"using-plot_popn","dir":"Articles","previous_headings":"Population","what":"Using plot_popn","title":"Visualising Data","text":"plot_popn() function designed visualise population structure survey respondents. creates population pyramid showing distributions across gender age groups. variable like average age (meanVar) specified, plot can also display information, adding another layer insight demographic composition.","code":"plot_popn(data = survey_df,           xVar = \"gender\",           yVar = \"ageGroup\",           weight = \"wt\", # optional           meanVar = \"age\", # optional (must be numeric)           addLabels = TRUE # to add % labels )"},{"path":"https://sarahcgall.github.io/scgUtils/articles/visualising-data.html","id":"faceting-by-group","dir":"Articles","previous_headings":"Population","what":"Faceting by Group","title":"Visualising Data","text":"Enhance population pyramid faceting plot_popn plot specific group, voter turnout. feature overlays selected group’s data onto total population structure, providing comparative view highlights differences similarities within subgroups.","code":"plot_popn(data = survey_df,           xVar = \"gender\",           yVar = \"ageGroup\",           group = \"turnoutUKGeneral\",           weight = \"wt\", # optional           addLabels = TRUE # to add % labels )"},{"path":"https://sarahcgall.github.io/scgUtils/articles/visualising-data.html","id":"personality","dir":"Articles","previous_headings":"","what":"Personality","title":"Visualising Data","text":"plot_bigfive() function returns ggplot2 chart help visualise personality profile survey data. radar chart primarily visualise Big Five personality traits (neuroticism, extroversion, openness, agreeableness, conscientiousness) can amended quantitative data types scale 0 100.  group provided, function returns faceted plots variables within group plotted top average. provides easy comparison variable rest cohort survey.","code":"# Create single plot using unweighted data plot_bigfive(bigfive_df,              bigfive = c(\"Neuroticism\", \"Extroversion\", \"Openness\", \"Agreeableness\", \"Conscientiousness\")) # Create faceted plot using age groups and weighted data plot_bigfive(bigfive_df,              bigfive = c(\"Neuroticism\", \"Extroversion\", \"Openness\", \"Agreeableness\", \"Conscientiousness\"),              group = \"Gender\",              weight = \"Weight\")"},{"path":"https://sarahcgall.github.io/scgUtils/articles/visualising-data.html","id":"binary","dir":"Articles","previous_headings":"","what":"Binary","title":"Visualising Data","text":"plot_binary() function visualises binary survey responses (e.g., “Yes” vs “”). particularly effective comparative analysis. function utilises grid_vars() function help transform data correct format.  group provided, function return faceted plots variables within group plotted total. provides easy comparison variable rest cohort survey.","code":"# Create list for dummy data vars <- list(Q1a = \"Art\",              Q1b = \"Automobiles\",              Q1c = \"Birdwatching\",              Q1d = \"Music\",              Q1e = \"Reading\",              Q1f = \"Cooking\",              Q1g = \"Hiking\",              Q1h = \"Watching Sport\",              Q1i = \"Computers\",              Q1j = \"Gaming\" ) # Create plot of total dataset using unweighted data plot_binary(binary_df,             vars = vars,             value = \"Yes\" ) # Create faceted plot using Gender and weighted data plot_binary(binary_df,             vars = vars,             value = \"Yes\",             group = \"Gender\", # optional             weight = \"Weight\", # optional             title = \"Hobbies\",             subtitle = \"by Gender\" )"},{"path":"https://sarahcgall.github.io/scgUtils/articles/visualising-data.html","id":"waffle","dir":"Articles","previous_headings":"","what":"Waffle","title":"Visualising Data","text":"Waffle plots provide unique compelling way visualise categorical data, making ideal representing proportions percentages datasets, including survey responses. plot_waffle() function scgUtils package offers straightforward method create plots.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/articles/visualising-data.html","id":"basic-usage","dir":"Articles","previous_headings":"Waffle","what":"Basic Usage","title":"Visualising Data","text":"basic use plot_waffle() involves creating plot represents distribution different categories. method especially effective visually demonstrating relative sizes groups within population.","code":"# Prepare Data waffle_df <- data.frame(     Category = c(\"A\", \"B\", \"C\"),     Count = c(30, 40, 30)   )  # Plot plot_waffle(waffle_df,             group = \"Category\",             values = \"Count\",             isolateVar = \"A\" # show a single plot only )"},{"path":"https://sarahcgall.github.io/scgUtils/articles/visualising-data.html","id":"using-plot_waffle-with-survey-data","dir":"Articles","previous_headings":"Waffle","what":"Using plot_waffle() with Survey Data","title":"Visualising Data","text":"plot_waffle() particularly adept handling survey data, supporting weighted unweighted analysis. function can automatically extract display relevant labels survey questions, enhancing plot’s interpretability. refined visual presentation, plot_waffle() allows customisation colours plot order. flexibility invaluable aligning visual aesthetic specific data narratives brand guidelines.","code":"# Waffle plot with unweighted survey data plot_waffle(survey_df %>% filter(p_socgrade != \"Unknown\"), # removing unknowns             group = \"p_socgrade\",             title = \"p_socgrade\" )"},{"path":"https://sarahcgall.github.io/scgUtils/articles/visualising-data.html","id":"likert-scales","dir":"Articles","previous_headings":"","what":"Likert Scales","title":"Visualising Data","text":"Likert scale responses visualised upcoming features, providing nuanced insights survey data. function contain four options visualisations, including: 100% Stacked Bars Diverging Neutrals Diverging without Neutrals Faceted Bars","code":""},{"path":"https://sarahcgall.github.io/scgUtils/articles/visualising-data.html","id":"other-plots","dir":"Articles","previous_headings":"","what":"Other Plots","title":"Visualising Data","text":"Future updates scgUtils introduce plots : plot_dumbbell() can used compare two categories view differences numeric data. plot_wordcloud() highlight keywords either qualitative quantitative results. plot_donut() illustrate numerical proportions. plot_radar() expand capabilities plot_bigfive() order allow comparison numeric multivariate data. plot_mekko()represent categorical data multiple subcategories.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sarah Gall. Author, maintainer.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gall S (2024). scgUtils: Utility functions Sarah C Gall Ltd associated packages. R package version 0.0.1, https://sarahcgall.github.io/scgUtils/, https://github.com/sarahcgall/scgUtils.","code":"@Manual{,   title = {scgUtils: Utility functions for Sarah C Gall Ltd and associated packages},   author = {Sarah Gall},   year = {2024},   note = {R package version 0.0.1, https://sarahcgall.github.io/scgUtils/},   url = {https://github.com/sarahcgall/scgUtils}, }"},{"path":[]},{"path":"https://sarahcgall.github.io/scgUtils/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Utility functions for Sarah C Gall Ltd and associated packages","text":"scgUtils comprehensive R package designed streamline process survey data analysis visualisation. offers range functions data processing, exploration, stylish visualisations, adhering branding guidelines custom colour schemes themes.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/index.html","id":"features","dir":"","previous_headings":"Overview","what":"Features","title":"Utility functions for Sarah C Gall Ltd and associated packages","text":"Survey Data Processing: Simplify manipulation survey datasets functions like get_data() process_factors(). Data Exploration Tools: Dive data using functions crosstab() grp_freq() detailed analyses. Custom Visualizations: Bring data life various plotting functions, plot_bigfive() personality traits plot_sankey() flow data representation. Styling Brand Consistency: Maintain brand integrity colour_pal() theme_scg(), ensuring consistent appealing data presentations.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/index.html","id":"installation","dir":"","previous_headings":"Overview","what":"Installation","title":"Utility functions for Sarah C Gall Ltd and associated packages","text":"Install development version scgUtils directly GitHub:","code":"devtools::install_github(\"sarahcgall/scgUtils\")"},{"path":"https://sarahcgall.github.io/scgUtils/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Utility functions for Sarah C Gall Ltd and associated packages","text":"’s quick example using scgUtils analyse visualise survey data:","code":"# Load sample data df <- get_file(\"inst/extdata/survey.sav\")  # Explore data with a crosstab crosstab(data = df,          rowVar = \"p_eurefvote\",          colVar = \"p_edlevel\",          weight = \"wt\",          format = \"df_wide\",          round_decimals = 2,          statistics = TRUE,          plot = TRUE ) # [1] \"p_eurefvote x p_edlevel: Chisq = 371.026 | DF = 10 | Cramer's V = 0.243 | p-value = 0\" #         p_eurefvote Undergraduate A-level Below GCSE  GCSE No qualifications Postgrad Total # 1 I voted to remain         61.23   40.58      27.47 30.60             23.49    73.47 47.92 # 2  I voted to leave         38.25   59.12      72.53 69.13             76.51    26.42 51.78 # 3        Don't know          0.52    0.30       0.00  0.27              0.00     0.10  0.31"},{"path":"https://sarahcgall.github.io/scgUtils/index.html","id":"feedback-and-contributions","dir":"","previous_headings":"","what":"Feedback and Contributions","title":"Utility functions for Sarah C Gall Ltd and associated packages","text":"Suggestions contributions welcome. proposed additions, amendments, feedback, please create issue.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/index.html","id":"related-packages","dir":"","previous_headings":"","what":"Related Packages","title":"Utility functions for Sarah C Gall Ltd and associated packages","text":"Check scgElectionsNZ additional datasets relevant NZ General Elections.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_display.html","id":null,"dir":"Reference","previous_headings":"","what":"Diplay Colour Options — colour_display","title":"Diplay Colour Options — colour_display","text":"Visualise colour options specified palette. function integrates colour_pal fetch colour data uses internal helper function, contrast_test, ensure text readability coloured bars. Useful previewing colour palettes, including individual colours, full palettes, custom selections.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_display.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diplay Colour Options — colour_display","text":"","code":"colour_display(   pal_name,   n = NULL,   assign = NULL,   type = c(\"discrete_as\", \"continuous\") )"},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_display.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diplay Colour Options — colour_display","text":"pal_name string specifying name palette visualise. Special option \"\" displays available categorical colours. n integer number desired colours palette. Relevant sequential diverging palettes. Defaults full length palette. 'n' exceeds available colours, warning issued. assign optional character vector representing levels categories colours. Used labelling bars plot. Length mismatch 'n' results warnings. type character string specifying type colour palette. Options \"discrete_as\" \"continuous\". \"continuous\" type can used sequential divergent palettes. Defaults \"discrete_as\".","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_display.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diplay Colour Options — colour_display","text":"ggplot2 object displaying colour palette. bar represents colour, labelled name hexadecimal value. continuous palettes, colour gradient displayed.","code":""},{"path":[]},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_display.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diplay Colour Options — colour_display","text":"","code":"# View full pallette colour_display(\"polUK\")   # View individual colour colour_display(\"Jaffa\")   # View sequential colour palette with 7 levels on a continuous scale colour_display(\"seqGreen\", 7, type=\"continuous\")   # View diverging colour pal_name with 5 levels with assigned values colour_display(\"divBlueGreen\", 5, c(\"Very Likely\",\"Likely\",\"Neutral\",\"Unlikely\",\"Very Unlikely\"))"},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_pal.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Colour Palettes — colour_pal","title":"Get Colour Palettes — colour_pal","text":"Generates colour palettes graphs. function provides versatile way retrieve colour schemes predefined set palettes, allowing either individual colours ranges colours based specified palette. supports sequential, diverging, categorical, political palettes.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_pal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Colour Palettes — colour_pal","text":"","code":"colour_pal(   pal_name,   n = NULL,   assign = NULL,   type = c(\"discrete\", \"discrete_as\", \"continuous\") )"},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_pal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Colour Palettes — colour_pal","text":"pal_name character string specifying name desired palette individual colour. Options include: * Names specific colours (e.g., \"Jaffa\"). Call `colour_display(\"\") colour names. * Named political palettes: \"polAus\", \"polNZ\", \"polUK\". * Named categorical palettes: \"catSimplified\" (max n=7), \"catExtended\" (max n=18). * Named sequential palettes (max n=7): \"seqGreen\", \"seqBlue\", \"seqRed\". * Named divergent palettes (max n=14): \"divRedBlue\", \"divBlueGreen\". function check input available predefined palettes colour names. invalid name provided, return error. n integer specifying number desired colours palette. particularly relevant sequential diverging palettes. specified, function defaults full length specified palette. warning issued 'n' exceeds number available colours palette. assign optional character vector representing levels categories associated colours. useful creating named colour vectors colour assigned specific label category. length 'assign' match 'n'. , warnings issued length mismatches. type character string specifying type colour palette return. Options \"discrete\", \"discrete_as\", \"continuous\". * \"discrete\": Returns unnamed vector colours. * \"discrete_as\": Returns named list colours based 'assign' parameter. * \"continuous\": Returns function generating colour gradients, applicable sequential divergent palettes. default \"discrete\".","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_pal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Colour Palettes — colour_pal","text":"Depending 'type' parameter, function returns: * vector colour values (\"discrete\"). * named list colour values (\"discrete_as\"). * function create gradient colours (\"continuous\").","code":""},{"path":[]},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_pal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Colour Palettes — colour_pal","text":"","code":"# Return full palette colour_pal(\"catExtended\") #>  [1] \"#478c5b\" \"#374e8e\" \"#df7c18\" \"#ac004f\" \"#4fbbae\" \"#ce4631\" \"#006d64\" #>  [8] \"#1b87aa\" \"#e3b13e\" \"#ae49a2\" \"#383751\" \"#704600\" \"#93a345\" \"#7e7e8f\" #> [15] \"#d5cdb9\" \"#a07bde\" \"#8aabfd\" \"#a08962\"  # Return individual colour colour_pal(\"Jaffa\") #> [1] \"#e78e47\"  # Return palette with 5 colours and assigned levels for each colour colour_pal(\"divBlueGreen\", 5,            c(\"Very Likely\", \"Likely\", \"Neutral\", \"Unlikely\", \"Very Unlikely\")) #> $`Very Likely` #> [1] \"#1b87aa\" #>  #> $Likely #> [1] \"#70a9c1\" #>  #> $Neutral #> [1] \"#c7c7c7\" #>  #> $Unlikely #> [1] \"#acb58a\" #>  #> $`Very Unlikely` #> [1] \"#93a345\" #>"},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_prep.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a Named Colour Palette for Data Columns — colour_prep","title":"Prepare a Named Colour Palette for Data Columns — colour_prep","text":"colour_prep helper function designed work tandem colour_pal. prepares colour palette visualising data assigning colours unique values across specified columns data frame. function particularly useful creating consistent colour mappings visualisations plots diagrams, colours associated specific data values. political colour palettes (identified \"pol\" prefix pal_name), colour_prep attempts match political party names data frame corresponding colours palette. example, data column contains \"Scottish National Party (SNP)\", function try match \"SNP\" entry colour palette assign appropriate hexadecimal colour, e.g., \"#FFF95D\" (light yellow). Values match assigned default grey colour (\"#cccccc\"). Users can manually amend default assignments modifying returned list, e.g., your_saved_colour_palette$default_value <- \"#34134a\".","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a Named Colour Palette for Data Columns — colour_prep","text":"","code":"colour_prep(data, columns, pal_name = \"catExtended\")"},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a Named Colour Palette for Data Columns — colour_prep","text":"data data frame containing data colours prepared. columns character vector specifying names columns data unique values extracted assigned colours. pal_name name colour palette use, defaulting \"catExtended\". refers extended categorical colour palette. palettes colour_pal can also specified.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare a Named Colour Palette for Data Columns — colour_prep","text":"named list hexadecimal colour codes, name corresponds unique value found specified columns data frame. list can directly used colour mapping data visualisations.","code":""},{"path":[]},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_prep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare a Named Colour Palette for Data Columns — colour_prep","text":"","code":"# Example data frame df <- data.frame(   Category1 = c(\"Scottish National Party (SNP)\", \"Labour\", \"Conservative\", \"Other\"),   Category2 = c(\"An independent candidate\", \"Invalid_Party_Name\", \"Other\", \"Conservative\") )  # Prepare a colour palette for the unique values in Category1 and Category2 colour_prep(df, c(\"Category1\", \"Category2\")) #> $`An independent candidate` #> [1] \"#478c5b\" #>  #> $Conservative #> [1] \"#374e8e\" #>  #> $Invalid_Party_Name #> [1] \"#df7c18\" #>  #> $Labour #> [1] \"#ac004f\" #>  #> $Other #> [1] \"#4fbbae\" #>  #> $`Scottish National Party (SNP)` #> [1] \"#ce4631\" #>   # See political party colours and compare with the full palette to see how the two names are matched actual <- colour_prep(df, c(\"Category1\", \"Category2\"), pal_name = \"polUK\") actual <- stack(actual) expected <- colour_pal(\"polUK\") expected <- stack(expected) colours <- dplyr::left_join(actual, expected, by=\"values\") colours <- stats::setNames(colours, c(\"colours\", \"df_name\", \"palette_name\")) print(colours) #>   colours                       df_name       palette_name #> 1 #DCDCDC      An independent candidate        Independent #> 2 #2e84c6                  Conservative Conservative Party #> 3 #cccccc            Invalid_Party_Name               <NA> #> 4 #d42027                        Labour       Labour Party #> 5 #cdcdd1                         Other              Other #> 6 #FFF95D Scottish National Party (SNP)                SNP"},{"path":"https://sarahcgall.github.io/scgUtils/reference/compile.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile Multiple Data Frames into One — compile","title":"Compile Multiple Data Frames into One — compile","text":"compile function generates comprehensive CSV statistics data frame survey data, combining crosstabs /statistics pair row column variables.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/compile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile Multiple Data Frames into One — compile","text":"","code":"compile(   data,   rowVars,   colVars,   weight,   format = c(\"csv\", \"statistics\"),   save = TRUE,   name = \"table\" )"},{"path":"https://sarahcgall.github.io/scgUtils/reference/compile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile Multiple Data Frames into One — compile","text":"data data frame containing survey data. rowVars vector names independent variables, represented rows. colVars vector names dependent variables, represented columns. weight Optional variable containing weight factors analysis. format desired output format: 'csv' formatted CSV file, 'statistics' statistical summary (default 'csv'). save Logical; TRUE, results saved CSV file (default TRUE). name name output file (without extension) save TRUE (default 'table').","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/compile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile Multiple Data Frames into One — compile","text":"save FALSE, returns data frame containing compiled results. save TRUE, function saves results CSV file return value.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/compile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compile Multiple Data Frames into One — compile","text":"","code":"if (FALSE) {   # Example: Compile crosstabs with CSV output using weighted data   compile(data = dataset,           rowVars = c(\"Q1\", \"Q2\"),           colVars = c(\"Gender\", \"VI\"),           weight = \"wgtvar\",           name = \"crosstabs\") }"},{"path":"https://sarahcgall.github.io/scgUtils/reference/crosstab.html","id":null,"dir":"Reference","previous_headings":"","what":"Produce Crosstabs / Contingency Tables for Analysis — crosstab","title":"Produce Crosstabs / Contingency Tables for Analysis — crosstab","text":"crosstab function generates crosstabs (contingency tables) survey data, allowing variety formatting analytical options. can produce tables statistical measures, create visual plots, handle weighted data.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/crosstab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produce Crosstabs / Contingency Tables for Analysis — crosstab","text":"","code":"crosstab(   data,   rowVar,   colVar,   weight = NULL,   totals = TRUE,   round_decimals = NULL,   statistics = FALSE,   plot = FALSE,   format = c(\"df_long\", \"df_wide\", \"csv\", \"statistics\"),   convert_to = c(\"percent\", \"frequency\"),   yLab = \"Population (%)\",   adjustX = FALSE )"},{"path":"https://sarahcgall.github.io/scgUtils/reference/crosstab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produce Crosstabs / Contingency Tables for Analysis — crosstab","text":"data data frame containing survey data. parameter required. rowVar independent variable represented rows (side table). colVar dependent variable represented columns (top table). weight optional variable containing weight factors analysis. totals Logical; TRUE, includes totals column output (default TRUE). round_decimals Optional; number decimal points rounding data (default NULL). statistics Logical; TRUE, calculates prints Chi-Square, degrees freedom (DF), Cramer's V, p-value (default FALSE). plot Logical; TRUE, generates plot visual representation crosstab data (default FALSE). format Specifies output format: 'df_long', 'df_wide', 'csv', 'statistics' (default 'df_long'). convert_to Determines conversion type: 'percent' 'frequency' (default 'percent'). yLab Title Y-axis, default \"Population (%)\". adjustX Logical; TRUE, adjusts X-axis labels 45-degree angle better readability (default FALSE).","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/crosstab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produce Crosstabs / Contingency Tables for Analysis — crosstab","text":"Depending chosen format, returns data frame either long wide format, containing row-wise percentages column-wise totals. plot TRUE, plot object also generated.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/crosstab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Produce Crosstabs / Contingency Tables for Analysis — crosstab","text":"","code":"if (FALSE) {   # Example: Create crosstabs with a long data frame output using weighted data   crosstab_result <- crosstab(data = dataset,                               rowVar = \"Q1\",                               colVar = \"Gender\",                               weight = \"wgtvar\",                               totals = FALSE,                               round_decimals = 2) }"},{"path":"https://sarahcgall.github.io/scgUtils/reference/get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Dataset — get_data","title":"Get Dataset — get_data","text":"get_data() helper function loading datasets. provides user ability set name data frame within environment (e.g. df).","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Dataset — get_data","text":"","code":"get_data(...)"},{"path":"https://sarahcgall.github.io/scgUtils/reference/get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Dataset — get_data","text":"... string, naming desired dataset. Available datasets include: survey: Wave 25 2014-2023 British Election Study Internet Panel","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Dataset — get_data","text":"get_data() returns data frame.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/get_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Dataset — get_data","text":"","code":"df <- get_data(\"survey\")"},{"path":"https://sarahcgall.github.io/scgUtils/reference/get_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve and Process File from Various Sources — get_file","title":"Retrieve and Process File from Various Sources — get_file","text":"get_file handles retrieval initial processing file different sources, including local storage, OneDrive, directly web. also preprocesses file based type.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/get_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve and Process File from Various Sources — get_file","text":"","code":"get_file(file_path, source = c(\"local\", \"onedrive\", \"web\"), row_no = 0)"},{"path":"https://sarahcgall.github.io/scgUtils/reference/get_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve and Process File from Various Sources — get_file","text":"file_path path, ID, URL file retrieved. source source file: 'local', 'onedrive', 'web' (default 'local'). row_no number rows skip beginning file, applicable CSV files (default 0).","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/get_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve and Process File from Various Sources — get_file","text":"data frame containing contents file.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/get_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve and Process File from Various Sources — get_file","text":"function first identifies file type based extension, retrieves file specified source using authenticate_source. retrieval, file preprocessed according type using preprocess_file_type, handles different formats like CSV SAV.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/get_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve and Process File from Various Sources — get_file","text":"","code":"if (FALSE) {   # Retrieve a local CSV file   data <- get_file(\"path/to/local/file.csv\")    # Retrieve a file from OneDrive   data <- get_file(\"file-id\", source = \"onedrive\")    # Retrieve and preprocess a Google Drive file, skipping the first row   data <- get_file(\"file-id\", source = \"googledrive\", row_no = 1)    # Retrieve a file directly from a web URL   data <- get_file(\"https://example.com/data.csv\", source = \"web\") }"},{"path":"https://sarahcgall.github.io/scgUtils/reference/grid_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot Binary Grid Survey Questions Longer — grid_vars","title":"Pivot Binary Grid Survey Questions Longer — grid_vars","text":"grid_vars function transforms binary grid survey questions longer format, enabling comparisons across different variables groups. supports optional grouping weighting.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/grid_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot Binary Grid Survey Questions Longer — grid_vars","text":"","code":"grid_vars(data, vars, group = NULL, weight = NULL)"},{"path":"https://sarahcgall.github.io/scgUtils/reference/grid_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot Binary Grid Survey Questions Longer — grid_vars","text":"data data frame containing survey data. vars list mapping original column names new variable names. required allows multiple variables. example, list(Q1a = \"Art\", Q1b = \"Automobiles\"). group optional variable comparing across groups. one group can specified. weight optional variable containing weight factors analysis.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/grid_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pivot Binary Grid Survey Questions Longer — grid_vars","text":"data frame long format, row representing response binary grid question. data frame includes frequencies optionally percentages groups /weights specified.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/grid_vars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pivot Binary Grid Survey Questions Longer — grid_vars","text":"function first converts specified binary grid questions long format using tidyr::pivot_longer. uses grp_freq calculate frequencies , applicable, percentages question-response pair. allows -depth analysis binary grid survey questions, especially combined group weight parameters.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/grid_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pivot Binary Grid Survey Questions Longer — grid_vars","text":"","code":"if (FALSE) {   # Example: Convert grid questions to long format and analyze by gender   vars <- list(Q1a = \"Art\", Q1b = \"Automobiles\", Q1c = \"Birdwatching\")   df <- grid_vars(dataset, vars = vars, group = \"gender\", weight = \"wgtvar\") }"},{"path":"https://sarahcgall.github.io/scgUtils/reference/grp_freq.html","id":null,"dir":"Reference","previous_headings":"","what":"Grouped Frequencies in Survey Data — grp_freq","title":"Grouped Frequencies in Survey Data — grp_freq","text":"grp_freq calculates frequency optionally percentage variable groups survey data, supporting weighted unweighted data.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/grp_freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grouped Frequencies in Survey Data — grp_freq","text":"","code":"grp_freq(   data,   groups,   weight = NULL,   set_names = NULL,   addPercent = FALSE,   groupsPercent = NULL,   round_decimals = NULL )"},{"path":"https://sarahcgall.github.io/scgUtils/reference/grp_freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grouped Frequencies in Survey Data — grp_freq","text":"data data frame containing survey data. groups vector variable names grouping. parameter required can include one multiple variables. weight optional variable containing weight factors analysis. set_names optional vector custom column names output data frame. addPercent Logical; TRUE, adds percentage column based frequency. default FALSE. groupsPercent optional vector variables calculating percentages. NULL, percentages calculated total. round_decimals optional numeric value specifying number decimal places round numeric data. default, rounding applied.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/grp_freq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grouped Frequencies in Survey Data — grp_freq","text":"data frame containing frequencies , optionally, percentages group.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/grp_freq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Grouped Frequencies in Survey Data — grp_freq","text":"function groups data based specified variables calculates frequencies. can also calculate percentages, either overall grouped additional variables. data can optionally weighted, output can customised specific column names.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/grp_freq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grouped Frequencies in Survey Data — grp_freq","text":"","code":"if (FALSE) {   # Calculate unweighted frequencies by group with percent added   df <- grp_freq(dataset, groups = c(\"age_categories\", \"gender\"), addPercent = TRUE)    # Calculate weighted frequencies by group with custom column names   df <- grp_freq(dataset, groups = c(\"age_categories\", \"gender\"),                  weight = \"wgtvar\", set_names = c(\"Age\", \"Gender\", \"n\")) }"},{"path":"https://sarahcgall.github.io/scgUtils/reference/grp_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Grouped Mean in Survey Data — grp_mean","title":"Calculate Grouped Mean in Survey Data — grp_mean","text":"grp_mean calculates mean (either unweighted weighted) specified variable, grouped one variables survey data.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/grp_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Grouped Mean in Survey Data — grp_mean","text":"","code":"grp_mean(   data,   meanVar,   groups,   weight = NULL,   set_names = NULL,   round_decimals = NULL )"},{"path":"https://sarahcgall.github.io/scgUtils/reference/grp_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Grouped Mean in Survey Data — grp_mean","text":"data data frame containing survey data. meanVar variable mean calculated; must numeric. groups Variables used grouping; one many variables can specified. weight optional variable containing weight factors calculating weighted mean. set_names optional vector custom column names output data frame. round_decimals optional numeric value specifying number decimal places rounding mean values.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/grp_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Grouped Mean in Survey Data — grp_mean","text":"data frame containing calculated means group, option include weighted means custom column names.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/grp_mean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Grouped Mean in Survey Data — grp_mean","text":"function can calculate either unweighted mean weight NULL, weighted mean weight provided. weight provided, calculates weighted mean, accounting interaction group variables. function designed work group interactions split full stop (.), might affect handling group values containing periods. results can rounded specified number decimal places, custom column names can set output data frame.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/grp_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Grouped Mean in Survey Data — grp_mean","text":"","code":"if (FALSE) {   # Calculate unweighted mean of 'age' grouped by 'gender'   df <- grp_mean(dataset, meanVar = \"age\", groups = \"gender\")    # Calculate weighted mean of 'age' grouped by 'gender', with custom column names   df <- grp_mean(dataset, meanVar = \"age\", groups = \"gender\",                  weight = \"wgtvar\", set_names = c(\"Gender\", \"Average Age\")) }"},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_bigfive.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise Big Five Personality Traits with Radar Plots — plot_bigfive","title":"Visualise Big Five Personality Traits with Radar Plots — plot_bigfive","text":"plot_bigfive creates radar plot visualising average scores Big Five personality traits, supporting individual group comparisons. optionally accommodates weighted data.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_bigfive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise Big Five Personality Traits with Radar Plots — plot_bigfive","text":"","code":"plot_bigfive(   data,   bigfive,   group = NULL,   weight = NULL,   totalColour = colour_pal(\"Regent Grey\"),   groupColours = colour_pal(\"catExtended\") )"},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_bigfive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise Big Five Personality Traits with Radar Plots — plot_bigfive","text":"data data frame containing survey data Big Five personality trait scores. bigfive vector column names representing Big Five personality traits. trait's scores numeric range 0 100. group optional variable comparing trait scores different groups. weight optional variable containing weight factors analysis. totalColour colour used plotting total average scores (default grey color). groupColours vector coluors used plotting grouped average scores (default uses predefined palette).","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_bigfive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualise Big Five Personality Traits with Radar Plots — plot_bigfive","text":"ggplot2 radar plot visualising average scores Big Five personality traits. plot includes comparisons total , specified, grouped averages.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_bigfive.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualise Big Five Personality Traits with Radar Plots — plot_bigfive","text":"function performs checks ensure specified bigfive variables exist data numeric within range 0 100. calculates average scores (weighted unweighted) creates radar plot visual comparison. plot includes individual trait scores , group variable provided, scores group.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_bigfive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualise Big Five Personality Traits with Radar Plots — plot_bigfive","text":"","code":"if (FALSE) {   # Example: Create a radar plot for Big Five traits, grouped by age categories   plot_bigfive(dataset,                bigfive = c(\"Neuroticism\", \"Extroversion\", \"Openness\",                            \"Agreeableness\", \"Conscientiousness\"),                group = \"age_categories\",                weight = \"wgtvar\") }"},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_binary.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise Binary Survey Data with Bar Plots — plot_binary","title":"Visualise Binary Survey Data with Bar Plots — plot_binary","text":"plot_binary visualises binary survey responses specified variables using bar plots. leverages grid_vars function create comparative visual representation, supporting optional grouping weighting.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_binary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise Binary Survey Data with Bar Plots — plot_binary","text":"","code":"plot_binary(   data,   vars,   value,   group = NULL,   weight = NULL,   title = NULL,   subtitle = NULL,   totalColour = colour_pal(\"French Grey\"),   groupColours = colour_pal(\"catExtended\") )"},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_binary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise Binary Survey Data with Bar Plots — plot_binary","text":"data data frame containing survey data. vars list mapping original column names new variable names visualisation. example, list(Q1a = \"Art\", Q1b = \"Automobiles\"). parameter required. value binary response value (e.g., \"Yes\") visualized. Required. group optional variable comparing responses different groups. weight optional variable containing weight factors analysis. title title plot. subtitle subtitle plot. totalColour colour used plotting total response percentages (default: French Grey). groupColours vector colours used plotting grouped response percentages (default: extended categorical palette).","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_binary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualise Binary Survey Data with Bar Plots — plot_binary","text":"ggplot2 bar plot visualising percentage specified binary response across chosen variables. plot includes comparisons total responses , specified, grouped responses.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_binary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualise Binary Survey Data with Bar Plots — plot_binary","text":"function first validates binary nature specified variables prepares data visualisation. resulting plot shows proportion specified binary response (value) variable vars. group variable provided, plot includes facet-wrapped comparisons across groups.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_binary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualise Binary Survey Data with Bar Plots — plot_binary","text":"","code":"if (FALSE) {   # Example: Visualise binary survey responses by gender   vars <- list(Q1a = \"Art\", Q1b = \"Automobiles\", Q1c = \"Birdwatching\")   df <- plot_binary(dataset, vars = vars, value = \"Yes\", group = \"gender\", weight = \"wgtvar\") }"},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_likert.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise Likert Scales with Stacked, Divergent, and Facetted Bar Plots — plot_likert","title":"Visualise Likert Scales with Stacked, Divergent, and Facetted Bar Plots — plot_likert","text":"plot_likert generates various types Likert plots (stacked, divergent, facetted) visualising survey data. versatile handling different plot types, inclusion NET scores, custom orderings.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_likert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise Likert Scales with Stacked, Divergent, and Facetted Bar Plots — plot_likert","text":"","code":"plot_likert(   data,   vars,   varLevels = NULL,   group = NULL,   weight = NULL,   type = c(\"stacked\", \"divergent\", \"facetted\"),   neutrals = c(\"no_change\", \"right\", \"exclude\"),   total = FALSE,   NET = FALSE,   title = NULL,   subtitle = NULL,   order_by = NULL,   colours = colour_pal(\"divRedBlue\"),   legend = c(\"top\", \"right\", \"left\", \"bottom\", \"none\"),   nrow = 1,   width = 0.8,   ratio = 6 )"},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_likert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise Likert Scales with Stacked, Divergent, and Facetted Bar Plots — plot_likert","text":"data data frame containing survey data. vars vector variables containing Likert responses. varLevels vector named list 'left', 'neutral', 'right' elements specifying levels Likert scale. group optional grouping variable creating facetted plots. specified, vars contain single variable. weight optional weighting variable survey data. type type Likert plot: 'stacked', 'divergent', 'facetted'. neutrals Handling neutral responses plot. Can 'no_change', 'right', 'exclude'. total TRUE group specified, includes option total population. NET TRUE, provides Net Rating Score (positive minus negative responses). title Title plot. subtitle Subtitle plot. order_by Specifies ordering responses plot. colours Colour palette variables. Default = colour_pal(\"divRedBlue\"). legend Position legend plot ('top', 'right', 'left', 'bottom', 'none'). nrow Number rows legend, applicable. Default = 1. width Width bars plot. Default = 0.8. ratio Aspect ratio plot. Default = 6.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_likert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualise Likert Scales with Stacked, Divergent, and Facetted Bar Plots — plot_likert","text":"ggplot2 object representing Likert plot.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_likert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualise Likert Scales with Stacked, Divergent, and Facetted Bar Plots — plot_likert","text":"","code":"if (FALSE) {   data <- survey_data   vars <- c(Q1 = \"Category 1\", Q2 = \"Category 2\")   varLevels <- list(left = c(\"Strongly Disagree\", \"Disagree\"),                     neutral = \"Neutral\",                     right = c(\"Agree\", \"Strongly Agree\"))   plot_likert(data, vars, varLevels, type = \"divergent\") }"},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_parliament.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise Parliamentary Seats by Party — plot_parliament","title":"Visualise Parliamentary Seats by Party — plot_parliament","text":"plot_parliament creates visual representation parliament's seat distribution party. depicts number seats party holds semi-circular parliament layout, optional addition percentage bar show popular vote won party.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_parliament.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise Parliamentary Seats by Party — plot_parliament","text":"","code":"plot_parliament(   data,   partyCol,   seatCol,   percentCol = NULL,   colours = colour_pal(\"catExtended\"),   size = 3,   alpha = 1,   title = NULL,   subtitle = NULL,   legend = c(\"none\", \"right\", \"bottom\", \"left\", \"top\"),   majorityLine = FALSE,   extendLine = 0.05,   num_rows = NULL,   rMin = 1,   rMax = 2.5 )"},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_parliament.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise Parliamentary Seats by Party — plot_parliament","text":"data data frame containing survey data, specifically party names seat counts. partyCol column data representing names political parties. seatCol column data representing number seats held party. percentCol Optional: column data representing popular vote won party. colours named vector colours parties. unspecified, default colours colour_pal(\"catExtended\") used. size Size seat marker plot. alpha Transparency level seat markers. title Title plot. subtitle Subtitle plot. legend Position legend plot. Can 'none', 'right', 'bottom', 'left', 'top'. majorityLine Boolean; TRUE, adds line indicating majority threshold. extendLine Length extend majority line sides, majorityLine TRUE. num_rows number rows distribute seats across semi-circle. NULL, calculated based total seats. rMin Minimum radius innermost row semi-circle. rMax Maximum radius outermost row semi-circle.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_parliament.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualise Parliamentary Seats by Party — plot_parliament","text":"ggplot2 object representing seat distribution parliament, options include percentage bar majority line.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_parliament.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualise Parliamentary Seats by Party — plot_parliament","text":"","code":"# Sample usage with fictional data   parliament_data <- data.frame(     Party = c(\"Party A\", \"Party B\", \"Party C\"),     Seats = c(120, 80, 50),     Percentage = c(48, 32, 20)   )   plot_parliament(parliament_data, partyCol = \"Party\", seatCol = \"Seats\", percentCol = \"Percentage\")"},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_popn.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise Population Profile of Survey Data — plot_popn","title":"Visualise Population Profile of Survey Data — plot_popn","text":"plot_popn creates visual representation population profile using survey data. can illustrate distribution age groups across genders categories, optionally includes average age statistics.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_popn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise Population Profile of Survey Data — plot_popn","text":"","code":"plot_popn(   data,   xVar,   yVar,   group = NULL,   weight = NULL,   meanVar = NULL,   colours = NULL,   title = \"Population Structure\",   subtitle = NULL,   xLab = \"Population (%)\",   yLab = \"Age\",   addLabels = FALSE,   thresholdLab = 3,   nudgeLab = 0.2,   sizeLab = 3,   faceLab = c(\"plain\", \"bold\", \"italic\", \"bold.italic\") )"},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_popn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise Population Profile of Survey Data — plot_popn","text":"data data frame containing survey data. xVar gender variable (similar categorical variable) x-axis. yVar age group variable y-axis. group optional variable additional grouping comparison. weight optional weighting variable analysis. meanVar optional numeric variable include average values plot. colours vector three colors male, female, total. parameter optional. title title plot; defaults \"Population Structure\". subtitle subtitle plot, particularly useful grouped plots; defaults question associated group variable. xLab title x-axis; defaults \"Population (%)\". yLab title y-axis; defaults \"Age\". addLabels logical indicating whether add percentage labels plot; defaults FALSE. thresholdLab numeric threshold label placement inside outside bars. nudgeLab numeric value adjust horizontal position labels. sizeLab font size labels. faceLab font style labels; can \"plain\", \"bold\", \"italic\", \"bold.italic\".","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_popn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualise Population Profile of Survey Data — plot_popn","text":"ggplot2 plot representing population profile based provided survey data.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_popn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualise Population Profile of Survey Data — plot_popn","text":"","code":"if (FALSE) {   # Example: Create a population plot with age and gender   plot_popn(dataset,             xVar = \"gender\",             yVar = \"age_categories\",             weight = \"wgtvar\",             meanVar = \"age\") }"},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_sankey.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise Data Flow with a Sankey Diagram — plot_sankey","title":"Visualise Data Flow with a Sankey Diagram — plot_sankey","text":"plot_sankey enhances networkD3::sankeyNetwork function, utilising htmlwidgets create interactive Sankey diagram. type flow diagram particularly effective illustrating data movement transfer different entities (nodes), distribution votes across elections preferential voting systems.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_sankey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise Data Flow with a Sankey Diagram — plot_sankey","text":"","code":"plot_sankey(   data,   source,   target,   value,   units = \"\",   colours = colour_pal(\"catExtended\"),   fontSize = 20,   fontFamily = \"Calibri\",   nodeWidth = 20,   nodePadding = 10,   margin = list(top = 0, right = 0, bottom = 0, left = 0),   width = 1200,   height = 800,   shiftLabel = NULL,   heading = NULL,   sourceTitle = NULL,   targetTitle = NULL )"},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_sankey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise Data Flow with a Sankey Diagram — plot_sankey","text":"data data frame containing flow data, row represents unique flow source target node. source column data representing source nodes. target column data representing target nodes. value column data representing flow's magnitude volume. units string indicating units value, displayed tooltip. Defaults empty string, implying units. colours list vector colours nodes links diagram, either hexadecimal codes colour names. Can named list specific node colour mapping. fontSize Font size text diagram. fontFamily Font family text diagram. nodeWidth Width nodes diagram. nodePadding Padding nodes diagram. margin Margins around diagram, specified list. width Width plot pixels. height Height plot pixels. shiftLabel Numeric value adjust position labels; NA auto-placement. heading optional string main title Sankey diagram. sourceTitle optional string labeling source nodes. targetTitle optional string labeling target nodes.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_sankey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualise Data Flow with a Sankey Diagram — plot_sankey","text":"interactive Sankey diagram HTML widget, can used R Markdown documents, Shiny applications, R console. diagram provides visual representation flow data, customisable aspects colours, fonts, node dimensions.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_sankey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualise Data Flow with a Sankey Diagram — plot_sankey","text":"","code":"if (FALSE) {   # Example: Visualising the flow of votes between parties   plot_sankey(data = election_data,               source = \"Party_Previous_Election\",               target = \"Party_Current_Election\",               value = \"Number_of_Votes\",               colours = c(\"Labour\" = \"red\", \"Green\" = \"green\", \"National\" = \"blue\"),               heading = \"Election Vote Flow\",               sourceTitle = \"Previous Election\",               targetTitle = \"Current Election\") }"},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_waffle.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Waffle Plot — plot_waffle","title":"Create a Waffle Plot — plot_waffle","text":"plot_waffle creates waffle plot visualise categorical data. plot useful showing proportions percentages visually appealing easily understandable format.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_waffle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Waffle Plot — plot_waffle","text":"","code":"plot_waffle(   data,   group,   values = NULL,   weight = NULL,   isolateVar = NULL,   orderPlots = c(\"none\", \"descending\", \"ascending\"),   title = NULL,   groupColours = colour_pal(\"catExtended\"),   backgroundColour = colour_pal(\"French Grey\"),   backgroundAlpha = 0.5,   borderColour = \"white\",   borderWidth = 0.5 )"},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_waffle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Waffle Plot — plot_waffle","text":"data data frame containing dataset visualized. group column data contains categorical groups waffle plot. values Optional: column data contains numerical values used calculating proportions. provided, counts group categories used. weight Optional: weighting variable used calculating group frequencies. isolateVar Optional: specific variable group isolate plot. orderPlots Specifies plots ordered. Accepted values 'none', 'ascending', 'descending'. Default 'none'. title title waffle plot. title matches group name, function return label attribute present. groupColours named unnamed vector colours category plot. backgroundColour Colour background plot. backgroundAlpha Alpha value (transparency) background. borderColour Colour border tiles plot. borderWidth Width border tiles. Default = 0.5.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_waffle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Waffle Plot — plot_waffle","text":"ggplot object representing waffle plot.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_waffle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Waffle Plot — plot_waffle","text":"","code":"data <- data.frame(     Category = c(\"A\", \"B\", \"C\"),     Count = c(30, 40, 30)   )   plot_waffle(data,               group = \"Category\",               values = \"Count\",               title = \"Sample Waffle Plot\",               orderPlots = \"descending\",               groupColours = c(A = \"blue\", B = \"yellow\", C = \"red\"))"},{"path":"https://sarahcgall.github.io/scgUtils/reference/process_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Unused Levels from Factors — process_factors","title":"Remove Unused Levels from Factors — process_factors","text":"Removes unused levels factor variables data frame preserving non-factor columns. Non-factor columns retained beginning data frame.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/process_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Unused Levels from Factors — process_factors","text":"","code":"process_factors(data)"},{"path":"https://sarahcgall.github.io/scgUtils/reference/process_factors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Unused Levels from Factors — process_factors","text":"data data frame containing survey data.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/process_factors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Unused Levels from Factors — process_factors","text":"modified data frame unused levels removed factor variables.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/process_factors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Unused Levels from Factors — process_factors","text":"","code":"if (FALSE) { df <- process_factors(df) }"},{"path":"https://sarahcgall.github.io/scgUtils/reference/survey.html","id":null,"dir":"Reference","previous_headings":"","what":"Wave 25 of the 2014-2023 British Election Study Internet Panel — survey","title":"Wave 25 of the 2014-2023 British Election Study Internet Panel — survey","text":"survey dataset British Electoral Study. purely way practice using functions charts within package. fieldwork survey conducted YouGov 5 May 23 May, 2023. practice dataset n=5000 respondents 65 variables. original dataset 570 variables n=30,407 respondents 63% retained Wave 23 (May 2022) 74% Wave 24 (December 2022).  dataset includes cumulative weight (wt).","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/survey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wave 25 of the 2014-2023 British Election Study Internet Panel — survey","text":"","code":"survey"},{"path":"https://sarahcgall.github.io/scgUtils/reference/survey.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wave 25 of the 2014-2023 British Election Study Internet Panel — survey","text":"data frame 5,000 rows 65 variables: id unique identifier respondent wt weight variable turnoutUKGeneral Likelihood vote general election generalElectionVote General election vote intention (recalled vote post-election waves) partyIdStrength Strength party identification partyId Party identification partyIdSqueeze Party ID party first ID question mii Important Issue mii_cat MII manual coding small_mii_cat MII (manually-coded-collapsed) LRAL_mii_cat Dimension MII bestOnMII Best party important issue polAttention Attention Politics pidWeThey speak party, usually say \"\" instead \"\". pidInterestedOthers interested people think party. pidCriticiseParty people criticize party, feels like personal insult. pidCommonParty lot common supporters party. pidConnected meet someone supports party, feel connected person. pidPraiseGood people praise party, makes feel good. pidWeTheyb speak party, usually say \"\" instead \"\". pidInterestedOthersb interested people think party. pidCriticisePartyb people criticize party, feels like personal insult. pidCommonPartyb lot common supporters party. pidConnectedb meet someone supports party, feel connected person. pidPraiseGoodb people praise party, makes feel good. likeSunak Like-dislike: Rishi Sunak likeStarmer Like-dislike: Keir Starmer likeCon Like-dislike: Conservatives likeLab Like-dislike: Labour likeLD Like-dislike: Liberal Democrats likeSNP Like-dislike: Scottish National Party likePC Like-dislike: Plaid Cymru likeBrexitParty Like-dislike: Brexit Party likeGrn Like-dislike: Green Party country Country gender Gender age Age ageGroup Age group pcon Parliamentary Constituency p_education Education qualification (highest attained) p_work_stat applies ? p_hh_children many people household 18? p_housing rent home live? p_gross_household Gross household income p_gross_personal Gross personal income p_hh_size many people, including , household? Please includ p_socgrade Social Grade p_disability day--day activities limited health problem disabilit p_sexuality following best describes sexuality? p_job_sector kind organisation work ? p_education_age Age completed formal education p_marital current marital relationship status? p_paper_read daily newspaper read often? p_religion regard belonging particular religion, , w p_parent parent guardian? p_country_birth Country birth p_ethnicity groups consider belong? p_past_vote_2010 2010 GE vote choice p_past_vote_2005 2005 GE vote choice p_past_vote_2015 2015 GE vote choice p_past_vote_2017 2017 GE vote choice p_past_vote_2019 2019 GE vote choice p_eurefvote EU referendum vote (earliest recorded) p_edlevel Education level p_eurefturnout EU referendum turnout (earliest recorded)","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/survey.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Wave 25 of the 2014-2023 British Election Study Internet Panel — survey","text":"dataset sourced British Electoral Study website (Wave 25). raw data available https://www.britishelectionstudy.com/data-object/wave-25---2014-2023-british-election-study-internet-panel/.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/survey.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wave 25 of the 2014-2023 British Election Study Internet Panel — survey","text":"full description themethodology questionnaire can found : https://www.britishelectionstudy.com/wp-content/uploads/2023/11/Bes_wave25Documentation.pdf","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/theme_scg.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom Theme for scg Plots — theme_scg","title":"Custom Theme for scg Plots — theme_scg","text":"theme_scg provides custom ggplot2 theme tailored scg plots. theme modifies various aspects ggplot2 plots, including fonts, colors, panel spacing, legend formatting, create visually consistent appealing style.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/theme_scg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom Theme for scg Plots — theme_scg","text":"","code":"theme_scg(base_size = 10, base_font = \"\")"},{"path":"https://sarahcgall.github.io/scgUtils/reference/theme_scg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom Theme for scg Plots — theme_scg","text":"base_size Base font size text elements plot (default 10). base_font Font family text elements. See names(pdfFonts()) available options. Default empty string, uses ggplot2 default font.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/theme_scg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custom Theme for scg Plots — theme_scg","text":"ggplot2 theme object can applied ggplot2 plots.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/theme_scg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Custom Theme for scg Plots — theme_scg","text":"function customizes various components ggplot2 plot, including plot title, axis titles texts, panel background, grid lines, legend, . theme aims provide clean, professional look suitable scg-style visualizations. Users can specify base font size family customize appearance.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/theme_scg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Custom Theme for scg Plots — theme_scg","text":"","code":"if (FALSE) {   ggplot(data = df, aes(x = x, y = y, fill = reorder(group, y))) +     geom_bar(stat = \"identity\", width = 0.8, position = position_dodge(width = 0.9), alpha = 1) +     scale_fill_manual(values = colour_pal(\"catExtended\")) +     labs(title = \"Title\", fill = y, x = x, y = y) +     theme_scg() }"},{"path":"https://sarahcgall.github.io/scgUtils/news/index.html","id":"scgutils-development-version-001","dir":"Changelog","previous_headings":"","what":"scgUtils (development version 0.0.1)","title":"scgUtils (development version 0.0.1)","text":"Initial release scgUtils, featuring suite functions effective data visualisation survey data analysis.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/news/index.html","id":"new-features-0-0-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"scgUtils (development version 0.0.1)","text":"colour_display: new function visualizing colour options specified palettes, enhancing text readability coloured bars. colour_pal: Generates colour palettes graphs, supporting sequential, diverging, categorical, political palettes. colour_prep: Prepares colour palette visualizing data, assigning colours unique values across specified columns data frame. compile: new function generates comprehensive CSV statistics data frame survey data, combining crosstabs /statistics pair row column variables. allows saving results CSV file returning data frame. crosstab: new function generating crosstabs (contingency tables) survey data. provides options formatting, including statistical measures, creating visual plots, handling weighted data. get_data: helper function loading internal datasets. get_file: Enhanced file retrieval preprocessing function, capable handling files local storage, OneDrive, web sources, . survey dataset: Integration Wave 25 2014-2023 British Election Study Internet Panel practice dataset within package. inclusion offers users substantial dataset practicing package’s functions charts. grid_vars: function transforming binary grid survey questions longer format, enabling comparisons across different variables groups. grp_freq: function calculate frequency optionally percentage variable groups survey data, supporting weighted unweighted data. grp_mean: Provides capability calculate grouped mean (either unweighted weighted) specified variable survey data. plot_bigfive: new function visualizing Big Five personality traits using radar plots. Supports individual group comparisons accommodates weighted data. plot_binary: new function visualizing binary survey responses using bar plots. Facilitates comparative analysis supports optional grouping weighting. plot_popn: new function creating visual representations population profiles survey data. Illustrates distributions age groups across genders categories. plot_sankey: Introduces ability create interactive Sankey diagrams illustrating data flow transfer different entities. process_factors: Function remove unused levels factor variables data frame, preserving non-factor columns. theme_scg: Introduces custom ggplot2 theme specifically designed scg plots, offering visually consistent appealing style data visualizations.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/news/index.html","id":"known-issues-0-0-1","dir":"Changelog","previous_headings":"","what":"Known Issues","title":"scgUtils (development version 0.0.1)","text":"plot_popn occasionally displays incorrect labels used certain datasets. fix planned next release. users may experience compatibility issues older versions R.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/news/index.html","id":"future-developments-0-0-1","dir":"Changelog","previous_headings":"","what":"Future Developments","title":"scgUtils (development version 0.0.1)","text":"Addition plot_parliament plots visualise likert scale data. Addition weighting functions, automating PowerPoint creation, developing dashboards.","code":""}]
