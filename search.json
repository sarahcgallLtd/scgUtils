[{"path":[]},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"using-data-from-packages","dir":"Articles","previous_headings":"Step 1: Upload","what":"Using data from packages","title":"Using Survey Data","text":"using sample dataset within package, use following get_data function access save data frame. Note sample data: data contains small portion full survey data British Electoral Survey. article analyse full survey data used example use functions within scgUtils package. full survey data can found : https://www.britishelectionstudy.com/data-object/wave-25---2014-2023-british-election-study-internet-panel/","code":"df <- get_data(\"survey\")"},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"using-other-data","dir":"Articles","previous_headings":"Step 1: Upload","what":"Using other data","title":"Using Survey Data","text":"Alternatively, uploading data, can use haven package read SPSS file R. Troubleshooting read_sav(): NB error occurs relates encoding, try adding encoding=\"latin1\". uploaded data, view string causing error. may caused NAs require convert string NA. example:","code":"df <- haven::read_sav(\"your_survey_data.sav\") df <- haven::read_sav(\"your_survey_data.sav\", encoding = \"latin1\")  # Additional step to amend error across entire dataset (all columns) df[df == \"__NA__\"] <- NA"},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"step-2-view","dir":"Articles","previous_headings":"","what":"Step 2: View","title":"Using Survey Data","text":"View first 6 rows data file details column  can also view original questionnaire values easily using sjPlot package.","code":"# NB first 3 variables shown only head(df[, 1:3]) # A tibble: 6 x 3 #      id    wt turnoutUKGeneral #   <dbl> <dbl> <dbl+lbl> # 1     7 0.376 5 [Very likely that I would vote] # 2    14 0.553 5 [Very likely that I would vote] # 3    15 0.712 5 [Very likely that I would vote] # 4    18 0.440 4 [Fairly likely] # 5    19 0.361 5 [Very likely that I would vote] # 6    24 1.69  5 [Very likely that I would vote] # NB first 10 variables shown only sjPlot::view_df(df[, 1:10])"},{"path":[]},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"converting-labelled-data-into-factors","dir":"Articles","previous_headings":"Step 3: Clean","what":"Converting labelled data into factors","title":"Using Survey Data","text":"add remove labels variables convert factors, use labelled package.","code":"df <- labelled::unlabelled(df) # NB first 3 variables shown only head(df[, 1:3]) # A tibble: 6 x 3 #      id    wt turnoutUKGeneral #   <dbl> <dbl> <fct> # 1     7 0.376 Very likely that I would vote # 2    14 0.553 Very likely that I would vote # 3    15 0.712 Very likely that I would vote # 4    18 0.440 Fairly likely # 5    19 0.361 Very likely that I would vote # 6    24 1.69  Very likely that I would vote"},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"removing-unused-factor-levels","dir":"Articles","previous_headings":"Step 3: Clean","what":"Removing unused factor levels","title":"Using Survey Data","text":"Sometimes circumstances unused factor levels, “18” (often occurs surveys disqualifies certain respondents participating). remove unused factor levels across dataset, can use remove_levels function. Using function ensure metadata retained can still accessed.","code":"levels(df$ageGroup) #> [1] \"Under 18\" \"18-25\"    \"26-35\"    \"36-45\"    \"46-55\"    \"56-65\"    \"66+\" df <- remove_levels(df) # \"Under 18\" has not been removed: levels(df$ageGroup) #> [1] \"18-25\" \"26-35\" \"36-45\" \"46-55\" \"56-65\" \"66+\"  # The metadata containing the question/label for this column remains: attr(df$ageGroup, \"label\") #> [1] \"Age group\""},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"step-4-weighting","dir":"Articles","previous_headings":"","what":"Step 4: Weighting","title":"Using Survey Data","text":"Section functions added future (survey data without weighting variable)","code":""},{"path":[]},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"numeric-data","dir":"Articles","previous_headings":"Step 5: Explore","what":"Numeric data","title":"Using Survey Data","text":"explore numeric data, descriptive statistics can easily found using summary combination tapply summary statistics group. unweighted data , however.  find average numeric data, use mean weighted.mean functions stats package (base R).  find weighted unweighted averages one many group variables, use grp_mean function.","code":"summary(df$age) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   18.00   55.00   66.00   63.58   73.00   93.00  # By group: tapply(df$age, df$gender, summary) #> $Male #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   30.00   56.00   66.00   64.15   74.00   93.00  #>  #> $Female #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   18.00   54.00   66.00   62.97   73.00   93.00 # Unweighted: mean(df$age) #> [1] 63.5824  # Weighted: weighted.mean(df$age, df$wt) #> [1] 60.17577 # By a single group: grp_mean(df,          meanVar = \"age\",          groups = \"gender\",          weight = \"wt\" # optional ) #>   gender     Mean #> 1   Male 60.14175 #> 2 Female 60.21559  # By many groups: grp_mean(df,          meanVar = \"age\",          groups = c(\"gender\", \"partyId\"),          weight = \"wt\", # optional          set_names = c(\"Gender\", \"Party Identification\", \"Average Age\"), # change names          round_decimals = 2 # round decimal places to 2 digits ) #>    Gender          Party Identification Average Age #> 1    Male                  Conservative       64.60 #> 2  Female                  Conservative       65.86 #> 3    Male                        Labour       59.81 #> 4  Female                        Labour       59.29 #> 5    Male              Liberal Democrat       60.44 #> 6  Female              Liberal Democrat       59.71 #> 7    Male Scottish National Party (SNP)       60.70 #> 8  Female Scottish National Party (SNP)       60.01 #> 9    Male                   Plaid Cymru       58.51 #> 10 Female                   Plaid Cymru       52.41 #> 11   Male                   Green Party       55.97 #> 12 Female                   Green Party       57.01 #> 13   Male                         Other       62.45 #> 14 Female                         Other       64.69 #> 15   Male                     No - none       55.95 #> 16 Female                     No - none       56.27 #> 17   Male        Brexit Party/Reform UK       62.17 #> 18 Female        Brexit Party/Reform UK       67.62 #> 19   Male                    Don't know       54.33 #> 20 Female                    Don't know       55.12  # NB. The `dplyr` equivalent is: # df %>% #   group_by(gender, partyId) %>% #   summarise(Mean = weighted.mean(age, wt))"},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"categorical-data","dir":"Articles","previous_headings":"Step 5: Explore","what":"Categorical data","title":"Using Survey Data","text":"categorical data, use crosstab function set statistics = TRUE include statistics crosstab.  see data presented frequency instead percentage, without totals, longer format, input following crosstab function:  automate across variables, compile function can first create data frame statistics (Chi-square, Degrees Freedom, Cramer’s V, p-value).  Using colVars rowVars , compile function can also used iterate variable produce tables, saved csv. csv, tables can formatted.","code":"crosstab(df,          rowVar = \"partyId\",          colVar = \"gender\",          weight = \"wt\", # optional          format = \"df_wide\",          round_decimals = 2,          statistics = TRUE ) # [1] partyId x gender: Chisq = 29.054 | DF = 9 | Cramer's V = 0.028 | p-value = 0.001 #                          partyId Total Female  Male # 1                   Conservative 29.26  27.41 30.85 # 2                         Labour 24.14  25.38 23.09 # 3               Liberal Democrat  5.84   5.64  6.00 # 4  Scottish National Party (SNP)  2.55   2.89  2.26 # 5                    Plaid Cymru  0.37   0.32  0.41 # 6                    Green Party  2.52   2.17  2.81 # 7                          Other  1.36   1.05  1.63 # 8                      No - none 27.35  27.93 26.85 # 9         Brexit Party/Reform UK  2.50   1.91  3.00 # 10                    Don't know  4.12   5.31  3.10 crosstab(df,          rowVar = \"partyId\",          colVar = \"gender\",          weight = \"wt\", # optional          format = \"df_long\", # default option          round_decimals = 2,          totals = FALSE,          convert_to = \"frequency\" ) #                          partyId gender   Freq # 1                   Conservative   Male 663.95 # 2                         Labour   Male 496.94 # 3               Liberal Democrat   Male 129.14 # 4  Scottish National Party (SNP)   Male  48.73 # 5                    Plaid Cymru   Male   8.81 # 6                    Green Party   Male  60.48 # 7                          Other   Male  35.09 # 8                      No - none   Male 577.89 # 9         Brexit Party/Reform UK   Male  64.56 # 10                    Don't know   Male  66.73 # ... # the row variables are typically your questions within the survey. For ease, utilise dplyr to select the variables rowVars <- names(df %>% dplyr::select(turnoutUKGeneral:partyIdStrength,                                       partyIdSqueeze:likeGrn,                                       pcon:p_hh_size,                                       p_disability:p_past_vote_2019,                                       p_eurefturnout))  # the column variables tend to be the demographic variables colVars <- c(\"gender\", \"ageGroup\", \"p_socgrade\", \"partyId\", \"p_eurefvote\", \"p_edlevel\")  # compile stats and save to data frame called `stats` stats <- compile(df,                  rowVars = rowVars,                  colVars = colVars,                  weight = \"wt\", # optional                  save = FALSE, # turn this to FALSE to prevent saving as a .csv                  format = \"statistics\")  # View first 10, sorted by Cramer's V head(stats[order(-stats$CramersV),], 10) #                 Row_Var   Col_Var     Size     Chisq DF CramersV p_value # 10  generalElectionVote   partyId 3953.314 10049.807 81    0.531       0 # 316    p_past_vote_2017   partyId 3545.672  5251.916 72    0.430       0 # 52            bestOnMII   partyId 3719.803  5886.195 81    0.419       0 # 310    p_past_vote_2015   partyId 3567.690  5054.699 81    0.397       0 # 258     p_education_age p_edlevel 3465.861  3157.122 30    0.390       0 # 322    p_past_vote_2019   partyId 3551.306  4736.332 90    0.365       0 # 248        p_job_sector  ageGroup 3991.109  1706.840 20    0.327       0 # 200         p_work_stat  ageGroup 3991.109  2857.155 35    0.320       0 # 298    p_past_vote_2010   partyId 3511.013  3182.663 81    0.317       0 # 304    p_past_vote_2005   partyId 3222.173  2868.127 81    0.314       0 compile(df,         rowVars = rowVars,         colVars = colVars,         weight = \"wt\", # optional         name = \"crosstabs\" # this will save as \"crosstabs.csv\" )"},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"grid-data","dir":"Articles","previous_headings":"Step 5: Explore","what":"Grid data","title":"Using Survey Data","text":"surveys, often “Please select apply” type questions grid formation question (e.g., favourable unfavourable impression following political leaders?“). circumstances, results question separated many columns, making difficult compare. resolve , use grid_vars function. function provides Question (named list), Response, frequency percent. result provided long format can easily used ggplot2 visualisation.  grid_vars function can also used group variable.","code":"# Create a named list of the columns that relate to the question vars <- list(likeSunak = \"Rishi Sunak\",              likeStarmer = \"Keir Starmer\",              likeCon = \"Conservative Party\",              likeLab = \"Labour Party\",              likeLD = \"Lib Dems\",              likeSNP = \"SNP\",              likePC = \"Plaid Cymru\",              likeBrexitParty = \"Brexit Party\",              likeGrn = \"Green Party\" )  grid_vars(df,           vars = vars,           weight = \"wt\" # optional ) #               Question         Response    Freq  Perc # 1         Brexit Party Strongly dislike 1369.44 34.31 # 2   Conservative Party Strongly dislike 1260.06 31.57 # 3          Green Party Strongly dislike  810.10 20.30 # 4         Keir Starmer Strongly dislike  850.59 21.31 # 5         Labour Party Strongly dislike  839.85 21.04 # 6             Lib Dems Strongly dislike  776.15 19.45 # 7          Plaid Cymru Strongly dislike   83.67 28.25 # 8          Rishi Sunak Strongly dislike  776.61 19.46 # 9                  SNP Strongly dislike  181.45 38.11 # 10        Brexit Party                1  208.83  5.23 # ... grid_vars(df,           vars = vars,           group = \"gender\",           weight = \"wt\" # optional ) #               Question         Response gender   Freq  Perc # 1         Brexit Party Strongly dislike   Male 825.56 38.36 # 2   Conservative Party Strongly dislike   Male 706.28 32.81 # 3          Green Party Strongly dislike   Male 548.62 25.49 # 4         Keir Starmer Strongly dislike   Male 511.98 23.79 # 5         Labour Party Strongly dislike   Male 478.74 22.24 # 6             Lib Dems Strongly dislike   Male 498.82 23.18 # 7          Plaid Cymru Strongly dislike   Male  50.76 31.78 # 8          Rishi Sunak Strongly dislike   Male 463.44 21.53 # 9                  SNP Strongly dislike   Male 106.10 42.47 # 10        Brexit Party                1   Male 129.24  6.00 # ..."},{"path":[]},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"population-structure","dir":"Articles","previous_headings":"Step 6: Visualise","what":"Population structure","title":"Using Survey Data","text":"view population profile respondents, use plot_popn function. meanVar provided, graph show just Male Female titles without average age provided.  plot_popn function can also facetted group. show value selected group overlay results onto total population population structure (grey). function also automatically capture metadata providing question/label provide subtitle ease understanding.","code":"plot_popn(data = df,           xVar = \"gender\",           yVar = \"ageGroup\",           weight = \"wt\", # optional           meanVar = \"age\", # optional (must be numeric)           addLabels = \"yes\" # to add % labels ) plot_popn(data = df,           xVar = \"gender\",           yVar = \"ageGroup\",           group = \"turnoutUKGeneral\",           weight = \"wt\", # optional           addLabels = \"yes\" # to add % labels )"},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"crosstabs","dir":"Articles","previous_headings":"Step 6: Visualise","what":"Crosstabs","title":"Using Survey Data","text":"visualise crosstab data, use crosstab function specifying plot = TRUE.  many variables along X-axis, can rotated 45 degrees adjustX = \"yes\".","code":"crosstab(df,          rowVar = \"p_eurefvote\",          colVar = \"p_edlevel\",          weight = \"wt\",          plot = TRUE,          statistics = TRUE ) crosstab(df,          rowVar = \"polAttention\",          colVar = \"gender\",          weight = \"wt\",          plot = TRUE,          statistics = TRUE,          adjustX = \"yes\" )"},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"binary-data","dir":"Articles","previous_headings":"Step 6: Visualise","what":"Binary data","title":"Using Survey Data","text":"plot_binary function utilises grid_vars function. , takes similar data except specific binary data (e.g., “Yes” “”). sample survey data unfortunately type data constructed similarly grid data , whereby vars named list created implemented function.","code":"# As an example: vars <- list(p1 = \"Music\",              p2 = \"Reading\",              p3 = \"Cooking / baking\",              p4 = \"Computers\",              p5 = \"Watching sport\",              #... etc. )  plot_binary(survey_data_with_binary_data_columns,             vars = vars,             group = \"gender\", # optional             weight = \"wt\" # optional )"},{"path":"https://sarahcgall.github.io/scgUtils/articles/using-survey-data.html","id":"flow-data","dir":"Articles","previous_headings":"Step 6: Visualise","what":"Flow data","title":"Using Survey Data","text":"visualise flow data, use plot_sankey function. , data can easily prepared using grp_freq function. plot_sankey function takes many different options, can adjust diagram suit data. example, 2019 Vote left voting intention right. colours parameter uses special function called colour_prep takes two source target columns original dataset, combines attempts match political party names listed polUK palette stored within scgUtils package (E.g., “Scottish National Party (SNP)” survey data matched “SNP” palette therefore assigned SNP’s hexidecimal colour, #FFF95D). NB. wish name list vector colours, can done plot_sankey function convert correct hexidecimal code (e.g., c(“yellow”, “red”, “blue”, “pink”, “green”, “grey”)).","code":"# Subset the required columns from the dataset sankey_df <- df[, c(\"wt\", \"generalElectionVote\", \"p_past_vote_2019\")]  # Get the frequency sankey_df <- grp_freq(sankey_df,                       groups = c(\"generalElectionVote\", \"p_past_vote_2019\"),                       weight = \"wt\" # optional ) head(sankey_df) #             generalElectionVote p_past_vote_2019       Freq # 1          I would/did not vote     Conservative  74.929191 # 2                  Conservative     Conservative 793.364394 # 3                        Labour     Conservative 123.625176 # 4              Liberal Democrat     Conservative  49.939047 # 5 Scottish National Party (SNP)     Conservative   1.606790 # 6                   Plaid Cymru     Conservative   2.361066  # NB. The `dplyr` equivalent is: # df %>% #   group_by(generalElectionVote, p_past_vote_2019) %>% #   summarise(Freq = sum(wt)) plot_sankey(sankey_df,             source = \"p_past_vote_2019\", # on the left side             target = \"generalElectionVote\", # on the right side             value = \"Freq\",             units = \"votes\",             colours = colour_prep(df, c(\"generalElectionVote\", \"p_past_vote_2019\"), pal_name = \"polUK\"),             fontSize = 16, # change font size             fontFamily = \"Calibri\", # default             nodeWidth = 20, # default             nodePadding = 10, # default             margin = list(\"left\" = 0, \"right\" = 130), # adjust the margin             width = 1200, # default             height = 800, # default             shiftLabel = NA # default ) # %>%   # save from viewer to html   # htmlwidgets::saveWidget(file = \"sankey_VI.html\", selfcontained = TRUE)"},{"path":"https://sarahcgall.github.io/scgUtils/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sarah Gall. Author, maintainer.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gall S (2024). scgUtils: Utility functions Sarah C Gall Ltd associated packages. R package version 0.0.1, https://github.com/r-lib/sarahcgall, https://sarahcgall.github.io/scgUtils/, https://sarahcgall.r-lib.org/.","code":"@Manual{,   title = {scgUtils: Utility functions for Sarah C Gall Ltd and associated packages},   author = {Sarah Gall},   year = {2024},   note = {R package version 0.0.1, https://github.com/r-lib/sarahcgall, https://sarahcgall.github.io/scgUtils/},   url = {https://sarahcgall.r-lib.org/}, }"},{"path":[]},{"path":"https://sarahcgall.github.io/scgUtils/index.html","id":"about","dir":"","previous_headings":"","what":"About","title":"Utility functions for Sarah C Gall Ltd and associated packages","text":"Welcome scgUtils, R package help: * Increase productivity incorporating formalising frequently used functions charts run cleaner succinct code. * Maintain brand guidelines styles supplying colours dataviz standards.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/index.html","id":"installation","dir":"","previous_headings":"About","what":"Installation","title":"Utility functions for Sarah C Gall Ltd and associated packages","text":"code relies development version scgUtils. Install :","code":"devtools::install_github(\"sarahcgall/scgUtils\")"},{"path":"https://sarahcgall.github.io/scgUtils/index.html","id":"functions--charts","dir":"","previous_headings":"","what":"Functions & Charts","title":"Utility functions for Sarah C Gall Ltd and associated packages","text":"functions formulae aim reduce duplication effort across projects, formalise various code, increase productivity, reduce potential errors.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/index.html","id":"guidelines--styles","dir":"","previous_headings":"","what":"Guidelines & Styles","title":"Utility functions for Sarah C Gall Ltd and associated packages","text":"colours layouts guides rigid rules. aim provide consistency across dataviz design aid decision-making process.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/index.html","id":"other-packages","dir":"","previous_headings":"","what":"Other Packages","title":"Utility functions for Sarah C Gall Ltd and associated packages","text":"package serves central hub Sarah C Gall Ltd. Several additional packages now available either complement assist project work. Additional packages include: * scgElectionsNZ: package provides datasets NZ general elections * scgElectionsAUS: TBC * scgElectionsUK: TBC","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_display.html","id":null,"dir":"Reference","previous_headings":"","what":"Diplay Colour Options — colour_display","title":"Diplay Colour Options — colour_display","text":"Visualise colour options","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_display.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diplay Colour Options — colour_display","text":"","code":"colour_display(pal_name, n, assign)"},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_display.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diplay Colour Options — colour_display","text":"pal_name Name pal_name visualise n Number desired colours. assign Vector corresponding levels/cetgories","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_display.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diplay Colour Options — colour_display","text":"ggplot2 graph","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_display.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diplay Colour Options — colour_display","text":"","code":"# View full pallette colour_display(\"polUK\")   # View individual colour colour_display(\"Jaffa\")   # View all individual colours colour_display(\"All\") #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero) #> Warning: Unable to calculate text width/height (using zero)   # View sequential colour pal_name with 7 levels colour_display(\"seqGreen\", 7)   # View diverging colour pal_name with 5 levels with assigned values colour_display(\"divBlueGreen\", 5, c(\"Very Likely\",\"Likely\",\"Neutral\",\"Unlikely\",\"Very Unlikely\"))"},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_pal.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Colour Palettes — colour_pal","title":"Get Colour Palettes — colour_pal","text":"Generate colours palettes graphs.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_pal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Colour Palettes — colour_pal","text":"","code":"colour_pal(   pal_name,   n,   assign,   type = c(\"discrete\", \"discrete_as\", \"continuous\") )"},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_pal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Colour Palettes — colour_pal","text":"pal_name Name desired palette individual colour. n Number desired colours. assign Vector corresponding levels/cetgories type Either \"continuous\", \"discrete\" (unnamed), \"discrete_as\" (named/assigned). Default = \"discrete\".","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_pal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Colour Palettes — colour_pal","text":"vector colours (discrete) list colours names (discrete_as)","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_pal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Colour Palettes — colour_pal","text":"","code":"# Return full palette colour_pal(\"catExtended\") #>  [1] \"#478c5b\" \"#374e8e\" \"#df7c18\" \"#ac004f\" \"#4fbbae\" \"#ce4631\" \"#006d64\" #>  [8] \"#1b87aa\" \"#e3b13e\" \"#ae49a2\" \"#383751\" \"#704600\" \"#93a345\" \"#7e7e8f\" #> [15] \"#d5cdb9\" \"#a07bde\" \"#8aabfd\" \"#a08962\"  # Return individual colour colour_pal(\"Jaffa\") #> [1] \"#e78e47\"  # Return palette with 5 colours and assigned levels for each colour colour_pal(\"divBlueGreen\", 5, c(\"Very Likely\",\"Likely\",\"Neutral\",\"Unlikely\",\"Very Unlikely\")) #> $`Very Likely` #> [1] \"#1b87aa\" #>  #> $Likely #> [1] \"#70a9c1\" #>  #> $Neutral #> [1] \"#c7c7c7\" #>  #> $Unlikely #> [1] \"#acb58a\" #>  #> $`Very Unlikely` #> [1] \"#93a345\" #>"},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_prep.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a Colour Palette for Data Columns — colour_prep","title":"Prepare a Colour Palette for Data Columns — colour_prep","text":"colour_prep works tandem colours_pal. helper function prepares colour palette visualising data, assigning colours unique values across specified columns data frame. particularly useful creating consistent colour mappings visualisations like plots diagrams colours associated specific data values. political colour palette requested colour_pal (prefix \"pol\"), function attempt assign political party names data frame match political party colour palette. E.g., data column contains \"Scottish National Party (SNP)\", function attempt match name within colour palette, \"SNP\", therefore assign hexidecimal colour, #FFF95D (light yellow). Values fail achieve full partial match assigned default \"#cccccc\" (grey). , can save output amend list items manually using `your_saved_colour_palette$default_value <- \"#34134a\".","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a Colour Palette for Data Columns — colour_prep","text":"","code":"colour_prep(data, columns, pal_name = \"catExtended\")"},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a Colour Palette for Data Columns — colour_prep","text":"data data frame containing data colours prepared. columns character vector specifying names columns data unique values extracted assigned colours. pal_name name colour palette use. default value \"catExtended\", refers extended categorical colour palette. palettes colour_pal can specified needed.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare a Colour Palette for Data Columns — colour_prep","text":"named list colours, name corresponds unique value found specified columns data frame, colour hexadecimal colour code specified colour palette. list can directly used colour mapping data visualisations.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/colour_prep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare a Colour Palette for Data Columns — colour_prep","text":"","code":"if (FALSE) { # Example data frame df <- data.frame(   Category1 = c(\"A\", \"B\", \"C\", \"A\"),   Category2 = c(\"X\", \"Y\", \"X\", \"Z\") )  # Prepare a colour palette for the unique values in Category1 and Category2 colours <- colour_prep(df, c(\"Category1\", \"Category2\"))  # The result is a named list of colours for each unique value in the specified columns print(colours) }"},{"path":"https://sarahcgall.github.io/scgUtils/reference/compile.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile Multiple Data Frames in One — compile","title":"Compile Multiple Data Frames in One — compile","text":"Produce csv containing full set crosstabs statistics 2x2 variables.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/compile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile Multiple Data Frames in One — compile","text":"","code":"compile(   data,   rowVars,   colVars,   weight,   format = c(\"csv\", \"statistics\"),   save = TRUE,   name = \"table\" )"},{"path":"https://sarahcgall.github.io/scgUtils/reference/compile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile Multiple Data Frames in One — compile","text":"data data frame containing survey data. parameter required. rowVars Independent variable represented rows (side). parameter required. colVars Dependent variable represented columns (top). parameter required. weight Variable containing weight factors. variable optional. format Formatting options return either csv statistics data frame (default = \"csv\"). save Logical, TRUE, df saved .csv file (default = TRUE). name Name df saved project directory (default = \"table\").","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/compile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile Multiple Data Frames in One — compile","text":".csv file","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/compile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compile Multiple Data Frames in One — compile","text":"","code":"if (FALSE) { # Create crosstabs with csv output using weighted data. compile(dataset,        rowVars = c(\"Q1\", \"Q2\"),        colVars = c(\"Gender\", \"VI\"),        weight = \"wgtvar\",        name = \"crosstabs\") }"},{"path":"https://sarahcgall.github.io/scgUtils/reference/crosstab.html","id":null,"dir":"Reference","previous_headings":"","what":"Crosstab / Contingency Tables — crosstab","title":"Crosstab / Contingency Tables — crosstab","text":"Produce crosstabs/contingency tables view individually perform analysis .","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/crosstab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crosstab / Contingency Tables — crosstab","text":"","code":"crosstab(   data,   rowVar,   colVar,   weight = NULL,   totals = TRUE,   round_decimals = NULL,   statistics = FALSE,   plot = FALSE,   format = c(\"df_long\", \"df_wide\", \"csv\", \"statistics\"),   convert_to = c(\"percent\", \"frequency\"),   yLab = \"Population (%)\",   adjustX = c(\"no\", \"yes\") )"},{"path":"https://sarahcgall.github.io/scgUtils/reference/crosstab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crosstab / Contingency Tables — crosstab","text":"data data frame containing survey data. parameter required. rowVar Independent variable represented rows (side). parameter required. colVar Dependent variable represented columns (top). parameter required. weight Variable containing weight factors. variable optional. totals Logical, totals TRUE, df totals column included (default = TRUE). round_decimals Set number decimal points data (default = NULL). statistics Logical, statistics TRUE, Chi-Square, DF, Cramer's V, p-value printed (default = FALSE). plot Logical, plot TRUE, chart available viewed (default = FALSE). format Formatting options return either long wide data frame (default = \"df_long\"). convert_to Conversion options return either percentages frequencies (default = \"percent\"). yLab Y axis title. Default = \"Population (%)\". adjustX \"yes\", values x-axis turn 45 degress. default \"\" keeps values horiztonal.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/crosstab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crosstab / Contingency Tables — crosstab","text":"Crosstabs held data frame containing row-wise percentages (%) col-wise totals (n)","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/crosstab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crosstab / Contingency Tables — crosstab","text":"","code":"if (FALSE) { # Create crosstabs with long df output using weighted data. df <- crosstab(dataset,               rowVar = \"Q1\",               colVar = \"Gender\",               weight = \"wgtvar\",               totals = FALSE,               round_decimal=2) }"},{"path":"https://sarahcgall.github.io/scgUtils/reference/get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Dataset — get_data","title":"Get Dataset — get_data","text":"get_data() helper function loading datasets. provides user ability set name data frame within environment (e.g. df).","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Dataset — get_data","text":"","code":"get_data(...)"},{"path":"https://sarahcgall.github.io/scgUtils/reference/get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Dataset — get_data","text":"... string, naming desired dataset. Available datasets include: survey: Wave 25 2014-2023 British Election Study Internet Panel","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Dataset — get_data","text":"get_data() returns data frame.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/get_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Dataset — get_data","text":"","code":"df <- get_data(\"survey\")"},{"path":"https://sarahcgall.github.io/scgUtils/reference/grid_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Binary Survey Data — grid_vars","title":"Binary Survey Data — grid_vars","text":"Pivot binary grid survey questions longer.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/grid_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binary Survey Data — grid_vars","text":"","code":"grid_vars(data, vars, group = NULL, weight = NULL)"},{"path":"https://sarahcgall.github.io/scgUtils/reference/grid_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binary Survey Data — grid_vars","text":"data data frame containing survey data. parameter required. vars list column names renamed variable. parameter required permits multiple variables. group variable overlay compare groups. parameter optional permits one group. weight Variable containing weight factors. variable optional.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/grid_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binary Survey Data — grid_vars","text":"data frame variables grid survey question.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/grid_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Binary Survey Data — grid_vars","text":"","code":"if (FALSE) { # Create list vars <- list(Q1a = \"Art\",              Q1b = \"Automobiles\",              Q1c = \"Birdwatching\") grid_vars(dataset,             vars = vars,             group = \"gender\",             weight = \"wgtvar\")  #      Question Response gender     Freq Perc #           Art      Yes   Male 275.3617   46 #   Automobiles      Yes   Male 320.1372   53 #  Birdwatching      Yes   Male 310.4357   52 #           Art      Yes Female 204.7525   48 #   Automobiles      Yes Female 212.0209   49 #  Birdwatching      Yes Female 203.9380   47 # ... }"},{"path":"https://sarahcgall.github.io/scgUtils/reference/grp_freq.html","id":null,"dir":"Reference","previous_headings":"","what":"Grouped Frequencies — grp_freq","title":"Grouped Frequencies — grp_freq","text":"Calculates frequency variable groups survey data.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/grp_freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grouped Frequencies — grp_freq","text":"","code":"grp_freq(   data,   groups,   weight = NULL,   set_names = NULL,   addPercent = c(\"no\", \"yes\"),   groupsPercent = NULL,   round_decimals = NULL )"},{"path":"https://sarahcgall.github.io/scgUtils/reference/grp_freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grouped Frequencies — grp_freq","text":"data data frame containing survey data. parameter required. groups Vector variables grouped. parameter required permits one many variables. weight Variable containing weight factors. variable optional. set_names Vector column names. paramenter optional. addPercent Get percent frequency (Options: \"\" \"yes\"). parameter optional, defaulted \"\", permits one many variables. groupsPercent Vector variables percent frequency. parameter optional permits none (total), one many variables. round_decimals Numeric value round numeric data x number decimals places. Default round. parameter optional.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/grp_freq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grouped Frequencies — grp_freq","text":"data frame containing frequencies group","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/grp_freq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grouped Frequencies — grp_freq","text":"","code":"if (FALSE) { # Sum unweighted data by group df <- grp_freq(dataset,                group = c(\"age_categories\",\"gender\"))  #    age_categories gender Freq # 1        18 to 24   Male   84 # 2        25 to 34   Male  155 # 3        35 to 44   Male  180 # 4        45 to 54   Male  115 # 5        55 to 54   Male   38 # 6             65+   Male    6 # 7        18 to 24 Female   83 # 8        25 to 34 Female  153 # 9        35 to 44 Female  129 # 10       45 to 54 Female   57 # 11       55 to 54 Female   24 # 12            65+ Female    6  # Sum weighted data by group and change the column names df <- grp_freq(dataset,                group = c(\"age_categories\",\"gender\"),                weight = \"wgtvar\",                set_names = c(\"Age\",\"Gender\",\"n\"))  #         Age Gender         n # 1  18 to 24   Male  43.40468 # 2  25 to 34   Male 115.36419 # 3  35 to 44   Male 160.55258 # 4  45 to 54   Male 187.29274 # 5  55 to 54   Male  61.88803 # 6       65+   Male  30.90000 # 7  18 to 24 Female  42.88796 # 8  25 to 34 Female 109.82791 # 9  35 to 44 Female 115.06268 # 10 45 to 54 Female  92.83205 # 11 55 to 54 Female  39.08718 # 12      65+ Female  30.90000 }"},{"path":"https://sarahcgall.github.io/scgUtils/reference/grp_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Grouped Mean — grp_mean","title":"Grouped Mean — grp_mean","text":"Calculates mean variable group survey data.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/grp_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grouped Mean — grp_mean","text":"","code":"grp_mean(   data,   meanVar,   groups,   weight = NULL,   set_names = NULL,   round_decimals = NULL )"},{"path":"https://sarahcgall.github.io/scgUtils/reference/grp_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grouped Mean — grp_mean","text":"data data frame containing survey data. parameter required. meanVar Variable averaged. var must numeric. parameter required. groups Variable grouped. parameter required permits one many variables. weight Variable containing weight factors. variable optional. set_names Vector column names. paramenter optional. round_decimals Numeric value round numeric data x number decimals places. Default round.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/grp_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grouped Mean — grp_mean","text":"data frame containing averages group","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/grp_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grouped Mean — grp_mean","text":"","code":"if (FALSE) { # Return a averages of a variable by group (weighted or unweighted) tmp <- grp_mean(dataset,                var = \"age\",                groups = \"gender\",                weight = \"wgtvar\")  #   gender     Mean # 1   Male 42.78670 # 2 Female 41.06441  # NB for non-grouped averages, use mean(var) or weighted.mean(var, weight) }"},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_bigfive.html","id":null,"dir":"Reference","previous_headings":"","what":"Big Five Personality Radar Plots — plot_bigfive","title":"Big Five Personality Radar Plots — plot_bigfive","text":"Visualises average scores Big Five personality traits radar graph.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_bigfive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Big Five Personality Radar Plots — plot_bigfive","text":"","code":"plot_bigfive(data, bigfive, group = NULL, weight = NULL)"},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_bigfive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Big Five Personality Radar Plots — plot_bigfive","text":"data data frame containing survey data. parameter required. bigfive vector column names representing Big Five personality trait scores. parameter required. group variable overlay compare groups. parameter optional. weight Variable containing weight factors. variable optional.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_bigfive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Big Five Personality Radar Plots — plot_bigfive","text":"radar plot created using ggplot2, displaying average scores Big Five personality traits.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_bigfive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Big Five Personality Radar Plots — plot_bigfive","text":"","code":"if (FALSE) { # Create a radar plot using age groups plot_bigfive(dataset,              bigfive = c(\"Neuroticism\", \"Extroversion\", \"Openness\",                           \"Agreeableness\", \"Conscientiousness\"),              group = \"age_categories\",              weight = \"wgtvar\") }"},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_binary.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Binary Survey Data — plot_binary","title":"Plot Binary Survey Data — plot_binary","text":"Visualizes binary survey results using grid_vars function.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_binary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Binary Survey Data — plot_binary","text":"","code":"plot_binary(data, vars, value, group = NULL, weight = NULL)"},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_binary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Binary Survey Data — plot_binary","text":"data data frame containing survey data. parameter required. vars list column names renamed variable. parameter required. value One two variable names return (e.g., \"Yes\"). variable required. group variable overlay compare groups. parameter optional. weight Variable containing weight factors. variable optional.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_binary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Binary Survey Data — plot_binary","text":"ggplot2 graph.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_binary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Binary Survey Data — plot_binary","text":"","code":"if (FALSE) { # Create list vars <- list(Q1a = \"Art\",              Q1b = \"Automobiles\",              Q1c = \"Birdwatching\") plot_binary(dataset,             vars = vars,             group = \"gender\",             weight = \"wgtvar\",             value = \"Yes\") }"},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_parliament.html","id":null,"dir":"Reference","previous_headings":"","what":"Parliament Plot — plot_parliament","title":"Parliament Plot — plot_parliament","text":"Visualise number seats parliament party.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_parliament.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parliament Plot — plot_parliament","text":"","code":"plot_parliament(data, group)"},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_parliament.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parliament Plot — plot_parliament","text":"data data frame containing survey data. parameter required. group variable overlay compare groups. parameter optional.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_parliament.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parliament Plot — plot_parliament","text":"ggplot2 plot parliamentary seats","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_parliament.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parliament Plot — plot_parliament","text":"","code":"if (FALSE) { # Create plot using age groups and age intervals included to return average age plot_parliament(dataset,) }"},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_popn.html","id":null,"dir":"Reference","previous_headings":"","what":"Population Profile Plot — plot_popn","title":"Population Profile Plot — plot_popn","text":"Visualise population profile survey data using age categories gender.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_popn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Population Profile Plot — plot_popn","text":"","code":"plot_popn(   data,   xVar,   yVar,   group = NULL,   weight = NULL,   meanVar = NULL,   colours = NULL,   title = \"Population Structure\",   subtitle = NULL,   xLab = \"Population (%)\",   yLab = \"Age\",   addLabels = c(\"no\", \"yes\"),   thresholdLab = 3,   nudgeLab = 0.2,   sizeLab = 3,   faceLab = c(\"plain\", \"bold\", \"italic\", \"bold.italic\") )"},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_popn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Population Profile Plot — plot_popn","text":"data data frame containing survey data. parameter required. xVar Gender variable. parameter required. yVar Age group variable. parameter required. group variable overlay compare groups. parameter optional. weight Variable containing weight factors. variable optional. meanVar Actual age variable (numeric) view average age. variable optional. colours vector three colours Male, Female, Total title Plot title. Default = \"Population Structure\". subtitle Plot subtitle grouped/faceted plot. Default = question group variable. xLab X axis title. Default = \"Population (%)\". yLab Y axis title. Default = \"Age\". addLabels Option add % labels graph. Default = \"\". thresholdLab Numeric value determine threshold labels go inside outside bars. Default = 3. nudgeLab Numeric value nudge labels left right. Default = 0.2. sizeLab Numeric value determine size label text. Default = 3. faceLab Option make labels \"plain\", \"bold\", \"italic\", \"bold.italic\". Default = \"plain\".","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_popn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Population Profile Plot — plot_popn","text":"ggplot2 plot population structure","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_popn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Population Profile Plot — plot_popn","text":"","code":"if (FALSE) { # Create plot using age groups and age intervals included to return average age plot_popn(dataset,           age_groups = \"age_categories\",           gender = \"gender\",           weight = \"wgtvar\",           age_int = \"age\") }"},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_sankey.html","id":null,"dir":"Reference","previous_headings":"","what":"Sankey Diagram Visualisation — plot_sankey","title":"Sankey Diagram Visualisation — plot_sankey","text":"plot_sankey enhances networkD3::sankeyNetwork htmlwidgets create Sankey diagram, specific type flow diagram visually represents movement flow data different entities (referred \"nodes\"). particularly useful illustrating distribution votes flowing parties across elections preferential voting systems.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_sankey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sankey Diagram Visualisation — plot_sankey","text":"","code":"plot_sankey(   data,   source,   target,   value,   units = \"\",   colours = colour_pal(\"catExtended\"),   fontSize = 20,   fontFamily = \"Calibri\",   nodeWidth = 20,   nodePadding = 10,   margin = list(left = 0, right = 0),   width = 1200,   height = 800,   shiftLabel = NA )"},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_sankey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sankey Diagram Visualisation — plot_sankey","text":"data data frame containing flow data, row represents unique flow source target. source column data frame representing source node flow. target column data frame representing target node flow. value column data frame representing magnitude volume flow source target. units string indicating units 'value'. displayed tooltip diagram. default empty string, indicating units specified. colours list vector colours (hexadecimal format colour names) used nodes links diagram. named list provided, names correspond node names specific colour mapping. fontSize font size text diagram. Default set 20. fontFamily font family text diagram. Default \"Calibri\". nodeWidth width nodes (entities) diagram. Default 20. nodePadding padding nodes diagram. Default 10. margin list specifying margins around diagram. Default list(\"left\" = 0, \"right\" = 0). Increase margin node names long go page. width width plot pixels. Default 1200. height height plot pixels. Default 800. shiftLabel numeric value controlling positioning labels nodes. set NA, labels automatically placed outside nodes. automatic placement results uneven label distribution, parameter can adjusted achieve desired layout.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_sankey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sankey Diagram Visualisation — plot_sankey","text":"Sankey diagram visualising flow data specified parameters. diagram interactive, allowing exploration individual flows nodes.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/plot_sankey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sankey Diagram Visualisation — plot_sankey","text":"","code":"if (FALSE) { # Prepare data split <- grp_freq(df,                   c(\"Q1a\",\"Q1c\"),                   \"wgtvar\",                   c(\"Party_Vote\",\"Candidate_Vote\",\"Votes\")) %>%          mutate(Votes = Votes/sum(Votes)) #           Party_Vote    Candidate_Vote        Votes # 1       Labour Party      Labour Party 0.1036125880 # 2     National Party      Labour Party 0.1040036893 # 3        Green Party      Labour Party 0.0320547032 # ...  # Create sankey plot_sankey(data = split,             source = \"Party_Vote\",             target = \"Candidate_Vote\",             value = \"Votes\",             colours = colour_prep(df, c(\"Q1a\", \"Q1c\"), pal_name = \"polNZ\")) }"},{"path":"https://sarahcgall.github.io/scgUtils/reference/remove_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Unused Levels from Factors — remove_levels","title":"Remove Unused Levels from Factors — remove_levels","text":"Removes unused levels factor variables data frame preserving non-factor columns. Non-factor columns retained beginning data frame.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/remove_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Unused Levels from Factors — remove_levels","text":"","code":"remove_levels(data)"},{"path":"https://sarahcgall.github.io/scgUtils/reference/remove_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Unused Levels from Factors — remove_levels","text":"data data frame containing survey data. parameter required.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/remove_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Unused Levels from Factors — remove_levels","text":"modified data frame unused levels removed factor variables.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/remove_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Unused Levels from Factors — remove_levels","text":"","code":"if (FALSE) { df <- remove_levels(df) }"},{"path":"https://sarahcgall.github.io/scgUtils/reference/survey.html","id":null,"dir":"Reference","previous_headings":"","what":"Wave 25 of the 2014-2023 British Election Study Internet Panel — survey","title":"Wave 25 of the 2014-2023 British Election Study Internet Panel — survey","text":"survey dataset British Electoral Study. purely way practice using functions charts within package. fieldwork survey conducted YouGov 5 May 23 May, 2023. practice dataset n=5000 respondents 65 variables. original dataset 570 variables n=30,407 respondents 63% retained Wave 23 (May 2022) 74% Wave 24 (December 2022).  dataset includes cumulative weight (wt).","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/survey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wave 25 of the 2014-2023 British Election Study Internet Panel — survey","text":"","code":"survey"},{"path":"https://sarahcgall.github.io/scgUtils/reference/survey.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wave 25 of the 2014-2023 British Election Study Internet Panel — survey","text":"data frame 5,000 rows 65 variables: id unique identifier respondent wt weight variable turnoutUKGeneral Likelihood vote general election generalElectionVote General election vote intention (recalled vote post-election waves) partyIdStrength Strength party identification partyId Party identification partyIdSqueeze Party ID party first ID question mii Important Issue mii_cat MII manual coding small_mii_cat MII (manually-coded-collapsed) LRAL_mii_cat Dimension MII bestOnMII Best party important issue polAttention Attention Politics pidWeThey speak party, usually say \"\" instead \"\". pidInterestedOthers interested people think party. pidCriticiseParty people criticize party, feels like personal insult. pidCommonParty lot common supporters party. pidConnected meet someone supports party, feel connected person. pidPraiseGood people praise party, makes feel good. pidWeTheyb speak party, usually say \"\" instead \"\". pidInterestedOthersb interested people think party. pidCriticisePartyb people criticize party, feels like personal insult. pidCommonPartyb lot common supporters party. pidConnectedb meet someone supports party, feel connected person. pidPraiseGoodb people praise party, makes feel good. likeSunak Like-dislike: Rishi Sunak likeStarmer Like-dislike: Keir Starmer likeCon Like-dislike: Conservatives likeLab Like-dislike: Labour likeLD Like-dislike: Liberal Democrats likeSNP Like-dislike: Scottish National Party likePC Like-dislike: Plaid Cymru likeBrexitParty Like-dislike: Brexit Party likeGrn Like-dislike: Green Party country Country gender Gender age Age ageGroup Age group pcon Parliamentary Constituency p_education Education qualification (highest attained) p_work_stat applies ? p_hh_children many people household 18? p_housing rent home live? p_gross_household Gross household income p_gross_personal Gross personal income p_hh_size many people, including , household? Please includ p_socgrade Social Grade p_disability day--day activities limited health problem disabilit p_sexuality following best describes sexuality? p_job_sector kind organisation work ? p_education_age Age completed formal education p_marital current marital relationship status? p_paper_read daily newspaper read often? p_religion regard belonging particular religion, , w p_parent parent guardian? p_country_birth Country birth p_ethnicity groups consider belong? p_past_vote_2010 2010 GE vote choice p_past_vote_2005 2005 GE vote choice p_past_vote_2015 2015 GE vote choice p_past_vote_2017 2017 GE vote choice p_past_vote_2019 2019 GE vote choice p_eurefvote EU referendum vote (earliest recorded) p_edlevel Education level p_eurefturnout EU referendum turnout (earliest recorded)","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/survey.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Wave 25 of the 2014-2023 British Election Study Internet Panel — survey","text":"dataset sourced British Electoral Study website (Wave 25). raw data available https://www.britishelectionstudy.com/data-object/wave-25---2014-2023-british-election-study-internet-panel/.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/survey.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wave 25 of the 2014-2023 British Election Study Internet Panel — survey","text":"full description themethodology questionnaire can found : https://www.britishelectionstudy.com/wp-content/uploads/2023/11/Bes_wave25Documentation.pdf","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/theme_scg.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme for SCG Plots — theme_scg","title":"Theme for SCG Plots — theme_scg","text":"theme SCG plots.","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/theme_scg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme for SCG Plots — theme_scg","text":"","code":"theme_scg(base_size = 10, base_font = \"\")"},{"path":"https://sarahcgall.github.io/scgUtils/reference/theme_scg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme for SCG Plots — theme_scg","text":"base_size Size font. base_font Font family. See names(pdfFonts()) options","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/theme_scg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme for SCG Plots — theme_scg","text":"ggplot2 theme","code":""},{"path":"https://sarahcgall.github.io/scgUtils/reference/theme_scg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme for SCG Plots — theme_scg","text":"","code":"if (FALSE) { ggplot(data=df, aes(x = x, y= y, fill=reorder(group, y))) +   geom_bar(stat=\"identity\", width=0.8, position = position_dodge(width=0.9), alpha=1) +   scale_fill_manual(values=colour_pal(\"catExtended\")) +   labs(title = \"Title\", fill = y, x= x, y= y) +   theme_scg() }"}]
